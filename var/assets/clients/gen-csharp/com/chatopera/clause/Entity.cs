/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace com.chatopera.clause
{

  /// <summary>
  /// 命名实体标识
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Entity : TBase
  {
    private string _name;
    private string _val;
    private bool _requires;
    private string _dictname;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Val
    {
      get
      {
        return _val;
      }
      set
      {
        __isset.val = true;
        this._val = value;
      }
    }

    public bool Requires
    {
      get
      {
        return _requires;
      }
      set
      {
        __isset.requires = true;
        this._requires = value;
      }
    }

    public string Dictname
    {
      get
      {
        return _dictname;
      }
      set
      {
        __isset.dictname = true;
        this._dictname = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool val;
      public bool requires;
      public bool dictname;
    }

    public Entity() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Val = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Requires = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Dictname = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Entity");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Val != null && __isset.val) {
          field.Name = "val";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Val);
          oprot.WriteFieldEnd();
        }
        if (__isset.requires) {
          field.Name = "requires";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Requires);
          oprot.WriteFieldEnd();
        }
        if (Dictname != null && __isset.dictname) {
          field.Name = "dictname";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Dictname);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Entity(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Val != null && __isset.val) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Val: ");
        __sb.Append(Val);
      }
      if (__isset.requires) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Requires: ");
        __sb.Append(Requires);
      }
      if (Dictname != null && __isset.dictname) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Dictname: ");
        __sb.Append(Dictname);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
