/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace com.chatopera.clause
{

  /// <summary>
  /// 词条
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DictWord : TBase
  {
    private string _word;
    private string _dict_id;
    private string _synonyms;
    private string _tag;
    private string _lang;
    private string _createdate;
    private string _updatedate;

    public string Word
    {
      get
      {
        return _word;
      }
      set
      {
        __isset.word = true;
        this._word = value;
      }
    }

    public string Dict_id
    {
      get
      {
        return _dict_id;
      }
      set
      {
        __isset.dict_id = true;
        this._dict_id = value;
      }
    }

    public string Synonyms
    {
      get
      {
        return _synonyms;
      }
      set
      {
        __isset.synonyms = true;
        this._synonyms = value;
      }
    }

    public string Tag
    {
      get
      {
        return _tag;
      }
      set
      {
        __isset.tag = true;
        this._tag = value;
      }
    }

    public string Lang
    {
      get
      {
        return _lang;
      }
      set
      {
        __isset.lang = true;
        this._lang = value;
      }
    }

    public string Createdate
    {
      get
      {
        return _createdate;
      }
      set
      {
        __isset.createdate = true;
        this._createdate = value;
      }
    }

    public string Updatedate
    {
      get
      {
        return _updatedate;
      }
      set
      {
        __isset.updatedate = true;
        this._updatedate = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool word;
      public bool dict_id;
      public bool synonyms;
      public bool tag;
      public bool lang;
      public bool createdate;
      public bool updatedate;
    }

    public DictWord() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Word = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Dict_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Synonyms = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Tag = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Lang = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Createdate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Updatedate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("DictWord");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Word != null && __isset.word) {
          field.Name = "word";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Word);
          oprot.WriteFieldEnd();
        }
        if (Dict_id != null && __isset.dict_id) {
          field.Name = "dict_id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Dict_id);
          oprot.WriteFieldEnd();
        }
        if (Synonyms != null && __isset.synonyms) {
          field.Name = "synonyms";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Synonyms);
          oprot.WriteFieldEnd();
        }
        if (Tag != null && __isset.tag) {
          field.Name = "tag";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tag);
          oprot.WriteFieldEnd();
        }
        if (Lang != null && __isset.lang) {
          field.Name = "lang";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Lang);
          oprot.WriteFieldEnd();
        }
        if (Createdate != null && __isset.createdate) {
          field.Name = "createdate";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Createdate);
          oprot.WriteFieldEnd();
        }
        if (Updatedate != null && __isset.updatedate) {
          field.Name = "updatedate";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Updatedate);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("DictWord(");
      bool __first = true;
      if (Word != null && __isset.word) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Word: ");
        __sb.Append(Word);
      }
      if (Dict_id != null && __isset.dict_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Dict_id: ");
        __sb.Append(Dict_id);
      }
      if (Synonyms != null && __isset.synonyms) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Synonyms: ");
        __sb.Append(Synonyms);
      }
      if (Tag != null && __isset.tag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tag: ");
        __sb.Append(Tag);
      }
      if (Lang != null && __isset.lang) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Lang: ");
        __sb.Append(Lang);
      }
      if (Createdate != null && __isset.createdate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Createdate: ");
        __sb.Append(Createdate);
      }
      if (Updatedate != null && __isset.updatedate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Updatedate: ");
        __sb.Append(Updatedate);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
