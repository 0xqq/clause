/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace com.chatopera.clause
{

  /// <summary>
  /// 聊天会话
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ChatSession : TBase
  {
    private string _intent_name;
    private string _chatbotID;
    private string _uid;
    private string _channel;
    private bool _resolved;
    private string _id;
    private List<Entity> _entities;
    private string _branch;
    private string _createdate;
    private string _updatedate;

    public string Intent_name
    {
      get
      {
        return _intent_name;
      }
      set
      {
        __isset.intent_name = true;
        this._intent_name = value;
      }
    }

    public string ChatbotID
    {
      get
      {
        return _chatbotID;
      }
      set
      {
        __isset.chatbotID = true;
        this._chatbotID = value;
      }
    }

    public string Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }

    public string Channel
    {
      get
      {
        return _channel;
      }
      set
      {
        __isset.channel = true;
        this._channel = value;
      }
    }

    public bool Resolved
    {
      get
      {
        return _resolved;
      }
      set
      {
        __isset.resolved = true;
        this._resolved = value;
      }
    }

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public List<Entity> Entities
    {
      get
      {
        return _entities;
      }
      set
      {
        __isset.entities = true;
        this._entities = value;
      }
    }

    public string Branch
    {
      get
      {
        return _branch;
      }
      set
      {
        __isset.branch = true;
        this._branch = value;
      }
    }

    public string Createdate
    {
      get
      {
        return _createdate;
      }
      set
      {
        __isset.createdate = true;
        this._createdate = value;
      }
    }

    public string Updatedate
    {
      get
      {
        return _updatedate;
      }
      set
      {
        __isset.updatedate = true;
        this._updatedate = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool intent_name;
      public bool chatbotID;
      public bool uid;
      public bool channel;
      public bool resolved;
      public bool id;
      public bool entities;
      public bool branch;
      public bool createdate;
      public bool updatedate;
    }

    public ChatSession() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Intent_name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ChatbotID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Uid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Channel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                Resolved = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  Entities = new List<Entity>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    Entity _elem10;
                    _elem10 = new Entity();
                    _elem10.Read(iprot);
                    Entities.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Branch = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Createdate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                Updatedate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ChatSession");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Intent_name != null && __isset.intent_name) {
          field.Name = "intent_name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Intent_name);
          oprot.WriteFieldEnd();
        }
        if (ChatbotID != null && __isset.chatbotID) {
          field.Name = "chatbotID";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChatbotID);
          oprot.WriteFieldEnd();
        }
        if (Uid != null && __isset.uid) {
          field.Name = "uid";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uid);
          oprot.WriteFieldEnd();
        }
        if (Channel != null && __isset.channel) {
          field.Name = "channel";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Channel);
          oprot.WriteFieldEnd();
        }
        if (__isset.resolved) {
          field.Name = "resolved";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Resolved);
          oprot.WriteFieldEnd();
        }
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Entities != null && __isset.entities) {
          field.Name = "entities";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Entities.Count));
            foreach (Entity _iter11 in Entities)
            {
              _iter11.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Branch != null && __isset.branch) {
          field.Name = "branch";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Branch);
          oprot.WriteFieldEnd();
        }
        if (Createdate != null && __isset.createdate) {
          field.Name = "createdate";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Createdate);
          oprot.WriteFieldEnd();
        }
        if (Updatedate != null && __isset.updatedate) {
          field.Name = "updatedate";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Updatedate);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ChatSession(");
      bool __first = true;
      if (Intent_name != null && __isset.intent_name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Intent_name: ");
        __sb.Append(Intent_name);
      }
      if (ChatbotID != null && __isset.chatbotID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatbotID: ");
        __sb.Append(ChatbotID);
      }
      if (Uid != null && __isset.uid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uid: ");
        __sb.Append(Uid);
      }
      if (Channel != null && __isset.channel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Channel: ");
        __sb.Append(Channel);
      }
      if (__isset.resolved) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Resolved: ");
        __sb.Append(Resolved);
      }
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Entities != null && __isset.entities) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Entities: ");
        __sb.Append(Entities);
      }
      if (Branch != null && __isset.branch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Branch: ");
        __sb.Append(Branch);
      }
      if (Createdate != null && __isset.createdate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Createdate: ");
        __sb.Append(Createdate);
      }
      if (Updatedate != null && __isset.updatedate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Updatedate: ");
        __sb.Append(Updatedate);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
