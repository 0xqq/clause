/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace com.chatopera.clause
{

  /// <summary>
  /// Clause Data Bundle
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Data : TBase
  {
    private int _rc;
    private string _error;
    private string _msg;
    private string _id;
    private string _chatbotID;
    private List<Dict> _customdicts;
    private List<Dict> _sysdicts;
    private List<BotSysdict> _botsysdicts;
    private List<DictWord> _dictwords;
    private Dict _customdict;
    private Dict _sysdict;
    private BotSysdict _botsysdict;
    private DictWord _dictword;
    private List<Intent> _intents;
    private List<IntentSlot> _slots;
    private List<IntentUtter> _utters;
    private Intent _intent;
    private IntentSlot _slot;
    private IntentUtter _utter;
    private List<DevelopVersion> _devvers;
    private List<ProdVersion> _provers;
    private DevelopVersion _devver;
    private ProdVersion _prover;
    private List<ChatSession> _sessions;
    private List<ChatMessage> _messages;
    private ChatSession _session;
    private ChatMessage _message;
    private int _currpage;
    private int _totalpage;
    private int _totalrows;
    private int _pagesize;
    private int _page;
    private string _query;

    public int Rc
    {
      get
      {
        return _rc;
      }
      set
      {
        __isset.rc = true;
        this._rc = value;
      }
    }

    public string Error
    {
      get
      {
        return _error;
      }
      set
      {
        __isset.error = true;
        this._error = value;
      }
    }

    public string Msg
    {
      get
      {
        return _msg;
      }
      set
      {
        __isset.msg = true;
        this._msg = value;
      }
    }

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string ChatbotID
    {
      get
      {
        return _chatbotID;
      }
      set
      {
        __isset.chatbotID = true;
        this._chatbotID = value;
      }
    }

    public List<Dict> Customdicts
    {
      get
      {
        return _customdicts;
      }
      set
      {
        __isset.customdicts = true;
        this._customdicts = value;
      }
    }

    public List<Dict> Sysdicts
    {
      get
      {
        return _sysdicts;
      }
      set
      {
        __isset.sysdicts = true;
        this._sysdicts = value;
      }
    }

    public List<BotSysdict> Botsysdicts
    {
      get
      {
        return _botsysdicts;
      }
      set
      {
        __isset.botsysdicts = true;
        this._botsysdicts = value;
      }
    }

    public List<DictWord> Dictwords
    {
      get
      {
        return _dictwords;
      }
      set
      {
        __isset.dictwords = true;
        this._dictwords = value;
      }
    }

    public Dict Customdict
    {
      get
      {
        return _customdict;
      }
      set
      {
        __isset.customdict = true;
        this._customdict = value;
      }
    }

    public Dict Sysdict
    {
      get
      {
        return _sysdict;
      }
      set
      {
        __isset.sysdict = true;
        this._sysdict = value;
      }
    }

    public BotSysdict Botsysdict
    {
      get
      {
        return _botsysdict;
      }
      set
      {
        __isset.botsysdict = true;
        this._botsysdict = value;
      }
    }

    public DictWord Dictword
    {
      get
      {
        return _dictword;
      }
      set
      {
        __isset.dictword = true;
        this._dictword = value;
      }
    }

    public List<Intent> Intents
    {
      get
      {
        return _intents;
      }
      set
      {
        __isset.intents = true;
        this._intents = value;
      }
    }

    public List<IntentSlot> Slots
    {
      get
      {
        return _slots;
      }
      set
      {
        __isset.slots = true;
        this._slots = value;
      }
    }

    public List<IntentUtter> Utters
    {
      get
      {
        return _utters;
      }
      set
      {
        __isset.utters = true;
        this._utters = value;
      }
    }

    public Intent Intent
    {
      get
      {
        return _intent;
      }
      set
      {
        __isset.intent = true;
        this._intent = value;
      }
    }

    public IntentSlot Slot
    {
      get
      {
        return _slot;
      }
      set
      {
        __isset.slot = true;
        this._slot = value;
      }
    }

    public IntentUtter Utter
    {
      get
      {
        return _utter;
      }
      set
      {
        __isset.utter = true;
        this._utter = value;
      }
    }

    public List<DevelopVersion> Devvers
    {
      get
      {
        return _devvers;
      }
      set
      {
        __isset.devvers = true;
        this._devvers = value;
      }
    }

    public List<ProdVersion> Provers
    {
      get
      {
        return _provers;
      }
      set
      {
        __isset.provers = true;
        this._provers = value;
      }
    }

    public DevelopVersion Devver
    {
      get
      {
        return _devver;
      }
      set
      {
        __isset.devver = true;
        this._devver = value;
      }
    }

    public ProdVersion Prover
    {
      get
      {
        return _prover;
      }
      set
      {
        __isset.prover = true;
        this._prover = value;
      }
    }

    public List<ChatSession> Sessions
    {
      get
      {
        return _sessions;
      }
      set
      {
        __isset.sessions = true;
        this._sessions = value;
      }
    }

    public List<ChatMessage> Messages
    {
      get
      {
        return _messages;
      }
      set
      {
        __isset.messages = true;
        this._messages = value;
      }
    }

    public ChatSession Session
    {
      get
      {
        return _session;
      }
      set
      {
        __isset.session = true;
        this._session = value;
      }
    }

    public ChatMessage Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }

    public int Currpage
    {
      get
      {
        return _currpage;
      }
      set
      {
        __isset.currpage = true;
        this._currpage = value;
      }
    }

    public int Totalpage
    {
      get
      {
        return _totalpage;
      }
      set
      {
        __isset.totalpage = true;
        this._totalpage = value;
      }
    }

    public int Totalrows
    {
      get
      {
        return _totalrows;
      }
      set
      {
        __isset.totalrows = true;
        this._totalrows = value;
      }
    }

    public int Pagesize
    {
      get
      {
        return _pagesize;
      }
      set
      {
        __isset.pagesize = true;
        this._pagesize = value;
      }
    }

    public int Page
    {
      get
      {
        return _page;
      }
      set
      {
        __isset.page = true;
        this._page = value;
      }
    }

    public string Query
    {
      get
      {
        return _query;
      }
      set
      {
        __isset.query = true;
        this._query = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool rc;
      public bool error;
      public bool msg;
      public bool id;
      public bool chatbotID;
      public bool customdicts;
      public bool sysdicts;
      public bool botsysdicts;
      public bool dictwords;
      public bool customdict;
      public bool sysdict;
      public bool botsysdict;
      public bool dictword;
      public bool intents;
      public bool slots;
      public bool utters;
      public bool intent;
      public bool slot;
      public bool utter;
      public bool devvers;
      public bool provers;
      public bool devver;
      public bool prover;
      public bool sessions;
      public bool messages;
      public bool session;
      public bool message;
      public bool currpage;
      public bool totalpage;
      public bool totalrows;
      public bool pagesize;
      public bool page;
      public bool query;
    }

    public Data() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Rc = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Error = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Msg = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                ChatbotID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  Customdicts = new List<Dict>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    Dict _elem14;
                    _elem14 = new Dict();
                    _elem14.Read(iprot);
                    Customdicts.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  Sysdicts = new List<Dict>();
                  TList _list15 = iprot.ReadListBegin();
                  for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                  {
                    Dict _elem17;
                    _elem17 = new Dict();
                    _elem17.Read(iprot);
                    Sysdicts.Add(_elem17);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.List) {
                {
                  Botsysdicts = new List<BotSysdict>();
                  TList _list18 = iprot.ReadListBegin();
                  for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                  {
                    BotSysdict _elem20;
                    _elem20 = new BotSysdict();
                    _elem20.Read(iprot);
                    Botsysdicts.Add(_elem20);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  Dictwords = new List<DictWord>();
                  TList _list21 = iprot.ReadListBegin();
                  for( int _i22 = 0; _i22 < _list21.Count; ++_i22)
                  {
                    DictWord _elem23;
                    _elem23 = new DictWord();
                    _elem23.Read(iprot);
                    Dictwords.Add(_elem23);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Struct) {
                Customdict = new Dict();
                Customdict.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Struct) {
                Sysdict = new Dict();
                Sysdict.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Struct) {
                Botsysdict = new BotSysdict();
                Botsysdict.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Struct) {
                Dictword = new DictWord();
                Dictword.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.List) {
                {
                  Intents = new List<Intent>();
                  TList _list24 = iprot.ReadListBegin();
                  for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                  {
                    Intent _elem26;
                    _elem26 = new Intent();
                    _elem26.Read(iprot);
                    Intents.Add(_elem26);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.List) {
                {
                  Slots = new List<IntentSlot>();
                  TList _list27 = iprot.ReadListBegin();
                  for( int _i28 = 0; _i28 < _list27.Count; ++_i28)
                  {
                    IntentSlot _elem29;
                    _elem29 = new IntentSlot();
                    _elem29.Read(iprot);
                    Slots.Add(_elem29);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.List) {
                {
                  Utters = new List<IntentUtter>();
                  TList _list30 = iprot.ReadListBegin();
                  for( int _i31 = 0; _i31 < _list30.Count; ++_i31)
                  {
                    IntentUtter _elem32;
                    _elem32 = new IntentUtter();
                    _elem32.Read(iprot);
                    Utters.Add(_elem32);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.Struct) {
                Intent = new Intent();
                Intent.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.Struct) {
                Slot = new IntentSlot();
                Slot.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.Struct) {
                Utter = new IntentUtter();
                Utter.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.List) {
                {
                  Devvers = new List<DevelopVersion>();
                  TList _list33 = iprot.ReadListBegin();
                  for( int _i34 = 0; _i34 < _list33.Count; ++_i34)
                  {
                    DevelopVersion _elem35;
                    _elem35 = new DevelopVersion();
                    _elem35.Read(iprot);
                    Devvers.Add(_elem35);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 21:
              if (field.Type == TType.List) {
                {
                  Provers = new List<ProdVersion>();
                  TList _list36 = iprot.ReadListBegin();
                  for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                  {
                    ProdVersion _elem38;
                    _elem38 = new ProdVersion();
                    _elem38.Read(iprot);
                    Provers.Add(_elem38);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 22:
              if (field.Type == TType.Struct) {
                Devver = new DevelopVersion();
                Devver.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 23:
              if (field.Type == TType.Struct) {
                Prover = new ProdVersion();
                Prover.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 24:
              if (field.Type == TType.List) {
                {
                  Sessions = new List<ChatSession>();
                  TList _list39 = iprot.ReadListBegin();
                  for( int _i40 = 0; _i40 < _list39.Count; ++_i40)
                  {
                    ChatSession _elem41;
                    _elem41 = new ChatSession();
                    _elem41.Read(iprot);
                    Sessions.Add(_elem41);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 25:
              if (field.Type == TType.List) {
                {
                  Messages = new List<ChatMessage>();
                  TList _list42 = iprot.ReadListBegin();
                  for( int _i43 = 0; _i43 < _list42.Count; ++_i43)
                  {
                    ChatMessage _elem44;
                    _elem44 = new ChatMessage();
                    _elem44.Read(iprot);
                    Messages.Add(_elem44);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 26:
              if (field.Type == TType.Struct) {
                Session = new ChatSession();
                Session.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 27:
              if (field.Type == TType.Struct) {
                Message = new ChatMessage();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 28:
              if (field.Type == TType.I32) {
                Currpage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 29:
              if (field.Type == TType.I32) {
                Totalpage = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.I32) {
                Totalrows = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 31:
              if (field.Type == TType.I32) {
                Pagesize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 32:
              if (field.Type == TType.I32) {
                Page = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 33:
              if (field.Type == TType.String) {
                Query = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Data");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.rc) {
          field.Name = "rc";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Rc);
          oprot.WriteFieldEnd();
        }
        if (Error != null && __isset.error) {
          field.Name = "error";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Error);
          oprot.WriteFieldEnd();
        }
        if (Msg != null && __isset.msg) {
          field.Name = "msg";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Msg);
          oprot.WriteFieldEnd();
        }
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (ChatbotID != null && __isset.chatbotID) {
          field.Name = "chatbotID";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChatbotID);
          oprot.WriteFieldEnd();
        }
        if (Customdicts != null && __isset.customdicts) {
          field.Name = "customdicts";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Customdicts.Count));
            foreach (Dict _iter45 in Customdicts)
            {
              _iter45.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Sysdicts != null && __isset.sysdicts) {
          field.Name = "sysdicts";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Sysdicts.Count));
            foreach (Dict _iter46 in Sysdicts)
            {
              _iter46.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Botsysdicts != null && __isset.botsysdicts) {
          field.Name = "botsysdicts";
          field.Type = TType.List;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Botsysdicts.Count));
            foreach (BotSysdict _iter47 in Botsysdicts)
            {
              _iter47.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Dictwords != null && __isset.dictwords) {
          field.Name = "dictwords";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Dictwords.Count));
            foreach (DictWord _iter48 in Dictwords)
            {
              _iter48.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Customdict != null && __isset.customdict) {
          field.Name = "customdict";
          field.Type = TType.Struct;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          Customdict.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Sysdict != null && __isset.sysdict) {
          field.Name = "sysdict";
          field.Type = TType.Struct;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          Sysdict.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Botsysdict != null && __isset.botsysdict) {
          field.Name = "botsysdict";
          field.Type = TType.Struct;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          Botsysdict.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Dictword != null && __isset.dictword) {
          field.Name = "dictword";
          field.Type = TType.Struct;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          Dictword.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Intents != null && __isset.intents) {
          field.Name = "intents";
          field.Type = TType.List;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Intents.Count));
            foreach (Intent _iter49 in Intents)
            {
              _iter49.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Slots != null && __isset.slots) {
          field.Name = "slots";
          field.Type = TType.List;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Slots.Count));
            foreach (IntentSlot _iter50 in Slots)
            {
              _iter50.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Utters != null && __isset.utters) {
          field.Name = "utters";
          field.Type = TType.List;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Utters.Count));
            foreach (IntentUtter _iter51 in Utters)
            {
              _iter51.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Intent != null && __isset.intent) {
          field.Name = "intent";
          field.Type = TType.Struct;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          Intent.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Slot != null && __isset.slot) {
          field.Name = "slot";
          field.Type = TType.Struct;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          Slot.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Utter != null && __isset.utter) {
          field.Name = "utter";
          field.Type = TType.Struct;
          field.ID = 19;
          oprot.WriteFieldBegin(field);
          Utter.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Devvers != null && __isset.devvers) {
          field.Name = "devvers";
          field.Type = TType.List;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Devvers.Count));
            foreach (DevelopVersion _iter52 in Devvers)
            {
              _iter52.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Provers != null && __isset.provers) {
          field.Name = "provers";
          field.Type = TType.List;
          field.ID = 21;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Provers.Count));
            foreach (ProdVersion _iter53 in Provers)
            {
              _iter53.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Devver != null && __isset.devver) {
          field.Name = "devver";
          field.Type = TType.Struct;
          field.ID = 22;
          oprot.WriteFieldBegin(field);
          Devver.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Prover != null && __isset.prover) {
          field.Name = "prover";
          field.Type = TType.Struct;
          field.ID = 23;
          oprot.WriteFieldBegin(field);
          Prover.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Sessions != null && __isset.sessions) {
          field.Name = "sessions";
          field.Type = TType.List;
          field.ID = 24;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Sessions.Count));
            foreach (ChatSession _iter54 in Sessions)
            {
              _iter54.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Messages != null && __isset.messages) {
          field.Name = "messages";
          field.Type = TType.List;
          field.ID = 25;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Messages.Count));
            foreach (ChatMessage _iter55 in Messages)
            {
              _iter55.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Session != null && __isset.session) {
          field.Name = "session";
          field.Type = TType.Struct;
          field.ID = 26;
          oprot.WriteFieldBegin(field);
          Session.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.Struct;
          field.ID = 27;
          oprot.WriteFieldBegin(field);
          Message.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.currpage) {
          field.Name = "currpage";
          field.Type = TType.I32;
          field.ID = 28;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Currpage);
          oprot.WriteFieldEnd();
        }
        if (__isset.totalpage) {
          field.Name = "totalpage";
          field.Type = TType.I32;
          field.ID = 29;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Totalpage);
          oprot.WriteFieldEnd();
        }
        if (__isset.totalrows) {
          field.Name = "totalrows";
          field.Type = TType.I32;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Totalrows);
          oprot.WriteFieldEnd();
        }
        if (__isset.pagesize) {
          field.Name = "pagesize";
          field.Type = TType.I32;
          field.ID = 31;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Pagesize);
          oprot.WriteFieldEnd();
        }
        if (__isset.page) {
          field.Name = "page";
          field.Type = TType.I32;
          field.ID = 32;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Page);
          oprot.WriteFieldEnd();
        }
        if (Query != null && __isset.query) {
          field.Name = "query";
          field.Type = TType.String;
          field.ID = 33;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Query);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Data(");
      bool __first = true;
      if (__isset.rc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Rc: ");
        __sb.Append(Rc);
      }
      if (Error != null && __isset.error) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Error: ");
        __sb.Append(Error);
      }
      if (Msg != null && __isset.msg) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Msg: ");
        __sb.Append(Msg);
      }
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (ChatbotID != null && __isset.chatbotID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatbotID: ");
        __sb.Append(ChatbotID);
      }
      if (Customdicts != null && __isset.customdicts) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Customdicts: ");
        __sb.Append(Customdicts);
      }
      if (Sysdicts != null && __isset.sysdicts) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sysdicts: ");
        __sb.Append(Sysdicts);
      }
      if (Botsysdicts != null && __isset.botsysdicts) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Botsysdicts: ");
        __sb.Append(Botsysdicts);
      }
      if (Dictwords != null && __isset.dictwords) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Dictwords: ");
        __sb.Append(Dictwords);
      }
      if (Customdict != null && __isset.customdict) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Customdict: ");
        __sb.Append(Customdict);
      }
      if (Sysdict != null && __isset.sysdict) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sysdict: ");
        __sb.Append(Sysdict);
      }
      if (Botsysdict != null && __isset.botsysdict) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Botsysdict: ");
        __sb.Append(Botsysdict== null ? "<null>" : Botsysdict.ToString());
      }
      if (Dictword != null && __isset.dictword) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Dictword: ");
        __sb.Append(Dictword== null ? "<null>" : Dictword.ToString());
      }
      if (Intents != null && __isset.intents) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Intents: ");
        __sb.Append(Intents);
      }
      if (Slots != null && __isset.slots) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Slots: ");
        __sb.Append(Slots);
      }
      if (Utters != null && __isset.utters) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Utters: ");
        __sb.Append(Utters);
      }
      if (Intent != null && __isset.intent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Intent: ");
        __sb.Append(Intent== null ? "<null>" : Intent.ToString());
      }
      if (Slot != null && __isset.slot) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Slot: ");
        __sb.Append(Slot== null ? "<null>" : Slot.ToString());
      }
      if (Utter != null && __isset.utter) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Utter: ");
        __sb.Append(Utter== null ? "<null>" : Utter.ToString());
      }
      if (Devvers != null && __isset.devvers) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Devvers: ");
        __sb.Append(Devvers);
      }
      if (Provers != null && __isset.provers) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Provers: ");
        __sb.Append(Provers);
      }
      if (Devver != null && __isset.devver) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Devver: ");
        __sb.Append(Devver== null ? "<null>" : Devver.ToString());
      }
      if (Prover != null && __isset.prover) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Prover: ");
        __sb.Append(Prover== null ? "<null>" : Prover.ToString());
      }
      if (Sessions != null && __isset.sessions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sessions: ");
        __sb.Append(Sessions);
      }
      if (Messages != null && __isset.messages) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Messages: ");
        __sb.Append(Messages);
      }
      if (Session != null && __isset.session) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Session: ");
        __sb.Append(Session== null ? "<null>" : Session.ToString());
      }
      if (Message != null && __isset.message) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Message: ");
        __sb.Append(Message== null ? "<null>" : Message.ToString());
      }
      if (__isset.currpage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Currpage: ");
        __sb.Append(Currpage);
      }
      if (__isset.totalpage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Totalpage: ");
        __sb.Append(Totalpage);
      }
      if (__isset.totalrows) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Totalrows: ");
        __sb.Append(Totalrows);
      }
      if (__isset.pagesize) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pagesize: ");
        __sb.Append(Pagesize);
      }
      if (__isset.page) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Page: ");
        __sb.Append(Page);
      }
      if (Query != null && __isset.query) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Query: ");
        __sb.Append(Query);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
