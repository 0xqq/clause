/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace com.chatopera.clause
{

  /// <summary>
  /// 词典
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Dict : TBase
  {
    private string _name;
    private string _chatbotID;
    private bool _builtin;
    private bool _active;
    private string _id;
    private string _description;
    private string _samples;
    private string _createdate;
    private string _updatedate;
    private bool _referred;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string ChatbotID
    {
      get
      {
        return _chatbotID;
      }
      set
      {
        __isset.chatbotID = true;
        this._chatbotID = value;
      }
    }

    public bool Builtin
    {
      get
      {
        return _builtin;
      }
      set
      {
        __isset.builtin = true;
        this._builtin = value;
      }
    }

    public bool Active
    {
      get
      {
        return _active;
      }
      set
      {
        __isset.active = true;
        this._active = value;
      }
    }

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }

    public string Samples
    {
      get
      {
        return _samples;
      }
      set
      {
        __isset.samples = true;
        this._samples = value;
      }
    }

    public string Createdate
    {
      get
      {
        return _createdate;
      }
      set
      {
        __isset.createdate = true;
        this._createdate = value;
      }
    }

    public string Updatedate
    {
      get
      {
        return _updatedate;
      }
      set
      {
        __isset.updatedate = true;
        this._updatedate = value;
      }
    }

    public bool Referred
    {
      get
      {
        return _referred;
      }
      set
      {
        __isset.referred = true;
        this._referred = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool chatbotID;
      public bool builtin;
      public bool active;
      public bool id;
      public bool description;
      public bool samples;
      public bool createdate;
      public bool updatedate;
      public bool referred;
    }

    public Dict() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ChatbotID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Builtin = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Active = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Samples = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Createdate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Updatedate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                Referred = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Dict");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (ChatbotID != null && __isset.chatbotID) {
          field.Name = "chatbotID";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChatbotID);
          oprot.WriteFieldEnd();
        }
        if (__isset.builtin) {
          field.Name = "builtin";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Builtin);
          oprot.WriteFieldEnd();
        }
        if (__isset.active) {
          field.Name = "active";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Active);
          oprot.WriteFieldEnd();
        }
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.description) {
          field.Name = "description";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        if (Samples != null && __isset.samples) {
          field.Name = "samples";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Samples);
          oprot.WriteFieldEnd();
        }
        if (Createdate != null && __isset.createdate) {
          field.Name = "createdate";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Createdate);
          oprot.WriteFieldEnd();
        }
        if (Updatedate != null && __isset.updatedate) {
          field.Name = "updatedate";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Updatedate);
          oprot.WriteFieldEnd();
        }
        if (__isset.referred) {
          field.Name = "referred";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Referred);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Dict(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (ChatbotID != null && __isset.chatbotID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatbotID: ");
        __sb.Append(ChatbotID);
      }
      if (__isset.builtin) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Builtin: ");
        __sb.Append(Builtin);
      }
      if (__isset.active) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Active: ");
        __sb.Append(Active);
      }
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Description != null && __isset.description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      if (Samples != null && __isset.samples) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Samples: ");
        __sb.Append(Samples);
      }
      if (Createdate != null && __isset.createdate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Createdate: ");
        __sb.Append(Createdate);
      }
      if (Updatedate != null && __isset.updatedate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Updatedate: ");
        __sb.Append(Updatedate);
      }
      if (__isset.referred) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Referred: ");
        __sb.Append(Referred);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
