/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace com.chatopera.clause
{

  /// <summary>
  /// 聊天消息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ChatMessage : TBase
  {
    private string _session_id;
    private string _chatbotID;
    private string _type;
    private int _direction;
    private int _branch;
    private string _sender;
    private string _receiver;
    private string _createdate;
    private string _id;
    private string _textMessage;
    private string _audioMessage;
    private string _videoMessage;
    private string _imageMessage;
    private List<string> _terms;
    private List<string> _tags;
    private bool _is_fallback;
    private bool _is_proactive;

    public string Session_id
    {
      get
      {
        return _session_id;
      }
      set
      {
        __isset.session_id = true;
        this._session_id = value;
      }
    }

    public string ChatbotID
    {
      get
      {
        return _chatbotID;
      }
      set
      {
        __isset.chatbotID = true;
        this._chatbotID = value;
      }
    }

    public string Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public int Direction
    {
      get
      {
        return _direction;
      }
      set
      {
        __isset.direction = true;
        this._direction = value;
      }
    }

    public int Branch
    {
      get
      {
        return _branch;
      }
      set
      {
        __isset.branch = true;
        this._branch = value;
      }
    }

    public string Sender
    {
      get
      {
        return _sender;
      }
      set
      {
        __isset.sender = true;
        this._sender = value;
      }
    }

    public string Receiver
    {
      get
      {
        return _receiver;
      }
      set
      {
        __isset.receiver = true;
        this._receiver = value;
      }
    }

    public string Createdate
    {
      get
      {
        return _createdate;
      }
      set
      {
        __isset.createdate = true;
        this._createdate = value;
      }
    }

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string TextMessage
    {
      get
      {
        return _textMessage;
      }
      set
      {
        __isset.textMessage = true;
        this._textMessage = value;
      }
    }

    public string AudioMessage
    {
      get
      {
        return _audioMessage;
      }
      set
      {
        __isset.audioMessage = true;
        this._audioMessage = value;
      }
    }

    public string VideoMessage
    {
      get
      {
        return _videoMessage;
      }
      set
      {
        __isset.videoMessage = true;
        this._videoMessage = value;
      }
    }

    public string ImageMessage
    {
      get
      {
        return _imageMessage;
      }
      set
      {
        __isset.imageMessage = true;
        this._imageMessage = value;
      }
    }

    public List<string> Terms
    {
      get
      {
        return _terms;
      }
      set
      {
        __isset.terms = true;
        this._terms = value;
      }
    }

    public List<string> Tags
    {
      get
      {
        return _tags;
      }
      set
      {
        __isset.tags = true;
        this._tags = value;
      }
    }

    public bool Is_fallback
    {
      get
      {
        return _is_fallback;
      }
      set
      {
        __isset.is_fallback = true;
        this._is_fallback = value;
      }
    }

    public bool Is_proactive
    {
      get
      {
        return _is_proactive;
      }
      set
      {
        __isset.is_proactive = true;
        this._is_proactive = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool session_id;
      public bool chatbotID;
      public bool type;
      public bool direction;
      public bool branch;
      public bool sender;
      public bool receiver;
      public bool createdate;
      public bool id;
      public bool textMessage;
      public bool audioMessage;
      public bool videoMessage;
      public bool imageMessage;
      public bool terms;
      public bool tags;
      public bool is_fallback;
      public bool is_proactive;
    }

    public ChatMessage() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Session_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ChatbotID = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Type = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Direction = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Branch = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Sender = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Receiver = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Createdate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                TextMessage = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                AudioMessage = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                VideoMessage = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                ImageMessage = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.List) {
                {
                  Terms = new List<string>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    string _elem2;
                    _elem2 = iprot.ReadString();
                    Terms.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.List) {
                {
                  Tags = new List<string>();
                  TList _list3 = iprot.ReadListBegin();
                  for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                  {
                    string _elem5;
                    _elem5 = iprot.ReadString();
                    Tags.Add(_elem5);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.Bool) {
                Is_fallback = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.Bool) {
                Is_proactive = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ChatMessage");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Session_id != null && __isset.session_id) {
          field.Name = "session_id";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Session_id);
          oprot.WriteFieldEnd();
        }
        if (ChatbotID != null && __isset.chatbotID) {
          field.Name = "chatbotID";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChatbotID);
          oprot.WriteFieldEnd();
        }
        if (Type != null && __isset.type) {
          field.Name = "type";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Type);
          oprot.WriteFieldEnd();
        }
        if (__isset.direction) {
          field.Name = "direction";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Direction);
          oprot.WriteFieldEnd();
        }
        if (__isset.branch) {
          field.Name = "branch";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Branch);
          oprot.WriteFieldEnd();
        }
        if (Sender != null && __isset.sender) {
          field.Name = "sender";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Sender);
          oprot.WriteFieldEnd();
        }
        if (Receiver != null && __isset.receiver) {
          field.Name = "receiver";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Receiver);
          oprot.WriteFieldEnd();
        }
        if (Createdate != null && __isset.createdate) {
          field.Name = "createdate";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Createdate);
          oprot.WriteFieldEnd();
        }
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        if (TextMessage != null && __isset.textMessage) {
          field.Name = "textMessage";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TextMessage);
          oprot.WriteFieldEnd();
        }
        if (AudioMessage != null && __isset.audioMessage) {
          field.Name = "audioMessage";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AudioMessage);
          oprot.WriteFieldEnd();
        }
        if (VideoMessage != null && __isset.videoMessage) {
          field.Name = "videoMessage";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(VideoMessage);
          oprot.WriteFieldEnd();
        }
        if (ImageMessage != null && __isset.imageMessage) {
          field.Name = "imageMessage";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ImageMessage);
          oprot.WriteFieldEnd();
        }
        if (Terms != null && __isset.terms) {
          field.Name = "terms";
          field.Type = TType.List;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Terms.Count));
            foreach (string _iter6 in Terms)
            {
              oprot.WriteString(_iter6);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Tags != null && __isset.tags) {
          field.Name = "tags";
          field.Type = TType.List;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Tags.Count));
            foreach (string _iter7 in Tags)
            {
              oprot.WriteString(_iter7);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.is_fallback) {
          field.Name = "is_fallback";
          field.Type = TType.Bool;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Is_fallback);
          oprot.WriteFieldEnd();
        }
        if (__isset.is_proactive) {
          field.Name = "is_proactive";
          field.Type = TType.Bool;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Is_proactive);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ChatMessage(");
      bool __first = true;
      if (Session_id != null && __isset.session_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Session_id: ");
        __sb.Append(Session_id);
      }
      if (ChatbotID != null && __isset.chatbotID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatbotID: ");
        __sb.Append(ChatbotID);
      }
      if (Type != null && __isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (__isset.direction) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Direction: ");
        __sb.Append(Direction);
      }
      if (__isset.branch) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Branch: ");
        __sb.Append(Branch);
      }
      if (Sender != null && __isset.sender) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sender: ");
        __sb.Append(Sender);
      }
      if (Receiver != null && __isset.receiver) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Receiver: ");
        __sb.Append(Receiver);
      }
      if (Createdate != null && __isset.createdate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Createdate: ");
        __sb.Append(Createdate);
      }
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (TextMessage != null && __isset.textMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TextMessage: ");
        __sb.Append(TextMessage);
      }
      if (AudioMessage != null && __isset.audioMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AudioMessage: ");
        __sb.Append(AudioMessage);
      }
      if (VideoMessage != null && __isset.videoMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("VideoMessage: ");
        __sb.Append(VideoMessage);
      }
      if (ImageMessage != null && __isset.imageMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ImageMessage: ");
        __sb.Append(ImageMessage);
      }
      if (Terms != null && __isset.terms) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Terms: ");
        __sb.Append(Terms);
      }
      if (Tags != null && __isset.tags) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Tags: ");
        __sb.Append(Tags);
      }
      if (__isset.is_fallback) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Is_fallback: ");
        __sb.Append(Is_fallback);
      }
      if (__isset.is_proactive) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Is_proactive: ");
        __sb.Append(Is_proactive);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
