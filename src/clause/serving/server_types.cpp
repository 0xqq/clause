/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "server_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace chatopera { namespace bot { namespace clause {


BotSysdict::~BotSysdict() throw() {
}


void BotSysdict::__set_chatbotID(const std::string& val) {
  this->chatbotID = val;
__isset.chatbotID = true;
}

void BotSysdict::__set_dict_id(const std::string& val) {
  this->dict_id = val;
__isset.dict_id = true;
}

void BotSysdict::__set_id(const std::string& val) {
  this->id = val;
__isset.id = true;
}

void BotSysdict::__set_createdate(const Timestamp& val) {
  this->createdate = val;
__isset.createdate = true;
}
std::ostream& operator<<(std::ostream& out, const BotSysdict& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t BotSysdict::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatbotID);
          this->__isset.chatbotID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dict_id);
          this->__isset.dict_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createdate);
          this->__isset.createdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BotSysdict::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("BotSysdict");

  if (this->__isset.chatbotID) {
    xfer += oprot->writeFieldBegin("chatbotID", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->chatbotID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dict_id) {
    xfer += oprot->writeFieldBegin("dict_id", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->dict_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createdate) {
    xfer += oprot->writeFieldBegin("createdate", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->createdate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BotSysdict &a, BotSysdict &b) {
  using ::std::swap;
  swap(a.chatbotID, b.chatbotID);
  swap(a.dict_id, b.dict_id);
  swap(a.id, b.id);
  swap(a.createdate, b.createdate);
  swap(a.__isset, b.__isset);
}

BotSysdict::BotSysdict(const BotSysdict& other0) {
  chatbotID = other0.chatbotID;
  dict_id = other0.dict_id;
  id = other0.id;
  createdate = other0.createdate;
  __isset = other0.__isset;
}
BotSysdict& BotSysdict::operator=(const BotSysdict& other1) {
  chatbotID = other1.chatbotID;
  dict_id = other1.dict_id;
  id = other1.id;
  createdate = other1.createdate;
  __isset = other1.__isset;
  return *this;
}
void BotSysdict::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "BotSysdict(";
  out << "chatbotID="; (__isset.chatbotID ? (out << to_string(chatbotID)) : (out << "<null>"));
  out << ", " << "dict_id="; (__isset.dict_id ? (out << to_string(dict_id)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "createdate="; (__isset.createdate ? (out << to_string(createdate)) : (out << "<null>"));
  out << ")";
}


ChatMessage::~ChatMessage() throw() {
}


void ChatMessage::__set_session_id(const std::string& val) {
  this->session_id = val;
__isset.session_id = true;
}

void ChatMessage::__set_chatbotID(const std::string& val) {
  this->chatbotID = val;
__isset.chatbotID = true;
}

void ChatMessage::__set_type(const std::string& val) {
  this->type = val;
__isset.type = true;
}

void ChatMessage::__set_direction(const int32_t val) {
  this->direction = val;
__isset.direction = true;
}

void ChatMessage::__set_branch(const int32_t val) {
  this->branch = val;
__isset.branch = true;
}

void ChatMessage::__set_sender(const std::string& val) {
  this->sender = val;
__isset.sender = true;
}

void ChatMessage::__set_receiver(const std::string& val) {
  this->receiver = val;
__isset.receiver = true;
}

void ChatMessage::__set_createdate(const Timestamp& val) {
  this->createdate = val;
__isset.createdate = true;
}

void ChatMessage::__set_id(const std::string& val) {
  this->id = val;
__isset.id = true;
}

void ChatMessage::__set_textMessage(const std::string& val) {
  this->textMessage = val;
__isset.textMessage = true;
}

void ChatMessage::__set_audioMessage(const std::string& val) {
  this->audioMessage = val;
__isset.audioMessage = true;
}

void ChatMessage::__set_videoMessage(const std::string& val) {
  this->videoMessage = val;
__isset.videoMessage = true;
}

void ChatMessage::__set_imageMessage(const std::string& val) {
  this->imageMessage = val;
__isset.imageMessage = true;
}

void ChatMessage::__set_terms(const std::vector<std::string> & val) {
  this->terms = val;
__isset.terms = true;
}

void ChatMessage::__set_tags(const std::vector<std::string> & val) {
  this->tags = val;
__isset.tags = true;
}

void ChatMessage::__set_is_fallback(const bool val) {
  this->is_fallback = val;
__isset.is_fallback = true;
}

void ChatMessage::__set_is_proactive(const bool val) {
  this->is_proactive = val;
__isset.is_proactive = true;
}
std::ostream& operator<<(std::ostream& out, const ChatMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChatMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->session_id);
          this->__isset.session_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatbotID);
          this->__isset.chatbotID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->direction);
          this->__isset.direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->branch);
          this->__isset.branch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sender);
          this->__isset.sender = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->receiver);
          this->__isset.receiver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createdate);
          this->__isset.createdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->textMessage);
          this->__isset.textMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->audioMessage);
          this->__isset.audioMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->videoMessage);
          this->__isset.videoMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->imageMessage);
          this->__isset.imageMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->terms.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->terms.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += iprot->readString(this->terms[_i6]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.terms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tags.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->tags.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += iprot->readString(this->tags[_i11]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_fallback);
          this->__isset.is_fallback = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_proactive);
          this->__isset.is_proactive = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChatMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChatMessage");

  if (this->__isset.session_id) {
    xfer += oprot->writeFieldBegin("session_id", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->session_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.chatbotID) {
    xfer += oprot->writeFieldBegin("chatbotID", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->chatbotID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.direction) {
    xfer += oprot->writeFieldBegin("direction", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->direction);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.branch) {
    xfer += oprot->writeFieldBegin("branch", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->branch);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sender) {
    xfer += oprot->writeFieldBegin("sender", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->sender);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.receiver) {
    xfer += oprot->writeFieldBegin("receiver", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->receiver);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createdate) {
    xfer += oprot->writeFieldBegin("createdate", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->createdate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.textMessage) {
    xfer += oprot->writeFieldBegin("textMessage", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->textMessage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.audioMessage) {
    xfer += oprot->writeFieldBegin("audioMessage", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->audioMessage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.videoMessage) {
    xfer += oprot->writeFieldBegin("videoMessage", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->videoMessage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.imageMessage) {
    xfer += oprot->writeFieldBegin("imageMessage", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->imageMessage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.terms) {
    xfer += oprot->writeFieldBegin("terms", ::apache::thrift::protocol::T_LIST, 14);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->terms.size()));
      std::vector<std::string> ::const_iterator _iter12;
      for (_iter12 = this->terms.begin(); _iter12 != this->terms.end(); ++_iter12)
      {
        xfer += oprot->writeString((*_iter12));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tags) {
    xfer += oprot->writeFieldBegin("tags", ::apache::thrift::protocol::T_LIST, 15);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tags.size()));
      std::vector<std::string> ::const_iterator _iter13;
      for (_iter13 = this->tags.begin(); _iter13 != this->tags.end(); ++_iter13)
      {
        xfer += oprot->writeString((*_iter13));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.is_fallback) {
    xfer += oprot->writeFieldBegin("is_fallback", ::apache::thrift::protocol::T_BOOL, 16);
    xfer += oprot->writeBool(this->is_fallback);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.is_proactive) {
    xfer += oprot->writeFieldBegin("is_proactive", ::apache::thrift::protocol::T_BOOL, 17);
    xfer += oprot->writeBool(this->is_proactive);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChatMessage &a, ChatMessage &b) {
  using ::std::swap;
  swap(a.session_id, b.session_id);
  swap(a.chatbotID, b.chatbotID);
  swap(a.type, b.type);
  swap(a.direction, b.direction);
  swap(a.branch, b.branch);
  swap(a.sender, b.sender);
  swap(a.receiver, b.receiver);
  swap(a.createdate, b.createdate);
  swap(a.id, b.id);
  swap(a.textMessage, b.textMessage);
  swap(a.audioMessage, b.audioMessage);
  swap(a.videoMessage, b.videoMessage);
  swap(a.imageMessage, b.imageMessage);
  swap(a.terms, b.terms);
  swap(a.tags, b.tags);
  swap(a.is_fallback, b.is_fallback);
  swap(a.is_proactive, b.is_proactive);
  swap(a.__isset, b.__isset);
}

ChatMessage::ChatMessage(const ChatMessage& other14) {
  session_id = other14.session_id;
  chatbotID = other14.chatbotID;
  type = other14.type;
  direction = other14.direction;
  branch = other14.branch;
  sender = other14.sender;
  receiver = other14.receiver;
  createdate = other14.createdate;
  id = other14.id;
  textMessage = other14.textMessage;
  audioMessage = other14.audioMessage;
  videoMessage = other14.videoMessage;
  imageMessage = other14.imageMessage;
  terms = other14.terms;
  tags = other14.tags;
  is_fallback = other14.is_fallback;
  is_proactive = other14.is_proactive;
  __isset = other14.__isset;
}
ChatMessage& ChatMessage::operator=(const ChatMessage& other15) {
  session_id = other15.session_id;
  chatbotID = other15.chatbotID;
  type = other15.type;
  direction = other15.direction;
  branch = other15.branch;
  sender = other15.sender;
  receiver = other15.receiver;
  createdate = other15.createdate;
  id = other15.id;
  textMessage = other15.textMessage;
  audioMessage = other15.audioMessage;
  videoMessage = other15.videoMessage;
  imageMessage = other15.imageMessage;
  terms = other15.terms;
  tags = other15.tags;
  is_fallback = other15.is_fallback;
  is_proactive = other15.is_proactive;
  __isset = other15.__isset;
  return *this;
}
void ChatMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChatMessage(";
  out << "session_id="; (__isset.session_id ? (out << to_string(session_id)) : (out << "<null>"));
  out << ", " << "chatbotID="; (__isset.chatbotID ? (out << to_string(chatbotID)) : (out << "<null>"));
  out << ", " << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ", " << "direction="; (__isset.direction ? (out << to_string(direction)) : (out << "<null>"));
  out << ", " << "branch="; (__isset.branch ? (out << to_string(branch)) : (out << "<null>"));
  out << ", " << "sender="; (__isset.sender ? (out << to_string(sender)) : (out << "<null>"));
  out << ", " << "receiver="; (__isset.receiver ? (out << to_string(receiver)) : (out << "<null>"));
  out << ", " << "createdate="; (__isset.createdate ? (out << to_string(createdate)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "textMessage="; (__isset.textMessage ? (out << to_string(textMessage)) : (out << "<null>"));
  out << ", " << "audioMessage="; (__isset.audioMessage ? (out << to_string(audioMessage)) : (out << "<null>"));
  out << ", " << "videoMessage="; (__isset.videoMessage ? (out << to_string(videoMessage)) : (out << "<null>"));
  out << ", " << "imageMessage="; (__isset.imageMessage ? (out << to_string(imageMessage)) : (out << "<null>"));
  out << ", " << "terms="; (__isset.terms ? (out << to_string(terms)) : (out << "<null>"));
  out << ", " << "tags="; (__isset.tags ? (out << to_string(tags)) : (out << "<null>"));
  out << ", " << "is_fallback="; (__isset.is_fallback ? (out << to_string(is_fallback)) : (out << "<null>"));
  out << ", " << "is_proactive="; (__isset.is_proactive ? (out << to_string(is_proactive)) : (out << "<null>"));
  out << ")";
}


Entity::~Entity() throw() {
}


void Entity::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void Entity::__set_val(const std::string& val) {
  this->val = val;
__isset.val = true;
}

void Entity::__set_requires(const bool val) {
  this->requires = val;
__isset.requires = true;
}

void Entity::__set_dictname(const std::string& val) {
  this->dictname = val;
__isset.dictname = true;
}
std::ostream& operator<<(std::ostream& out, const Entity& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Entity::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->val);
          this->__isset.val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->requires);
          this->__isset.requires = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dictname);
          this->__isset.dictname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Entity::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Entity");

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.val) {
    xfer += oprot->writeFieldBegin("val", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requires) {
    xfer += oprot->writeFieldBegin("requires", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->requires);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dictname) {
    xfer += oprot->writeFieldBegin("dictname", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->dictname);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Entity &a, Entity &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.val, b.val);
  swap(a.requires, b.requires);
  swap(a.dictname, b.dictname);
  swap(a.__isset, b.__isset);
}

Entity::Entity(const Entity& other16) {
  name = other16.name;
  val = other16.val;
  requires = other16.requires;
  dictname = other16.dictname;
  __isset = other16.__isset;
}
Entity& Entity::operator=(const Entity& other17) {
  name = other17.name;
  val = other17.val;
  requires = other17.requires;
  dictname = other17.dictname;
  __isset = other17.__isset;
  return *this;
}
void Entity::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Entity(";
  out << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "val="; (__isset.val ? (out << to_string(val)) : (out << "<null>"));
  out << ", " << "requires="; (__isset.requires ? (out << to_string(requires)) : (out << "<null>"));
  out << ", " << "dictname="; (__isset.dictname ? (out << to_string(dictname)) : (out << "<null>"));
  out << ")";
}


ChatSession::~ChatSession() throw() {
}


void ChatSession::__set_intent_name(const std::string& val) {
  this->intent_name = val;
__isset.intent_name = true;
}

void ChatSession::__set_chatbotID(const std::string& val) {
  this->chatbotID = val;
__isset.chatbotID = true;
}

void ChatSession::__set_uid(const std::string& val) {
  this->uid = val;
__isset.uid = true;
}

void ChatSession::__set_channel(const std::string& val) {
  this->channel = val;
__isset.channel = true;
}

void ChatSession::__set_resolved(const bool val) {
  this->resolved = val;
__isset.resolved = true;
}

void ChatSession::__set_id(const std::string& val) {
  this->id = val;
__isset.id = true;
}

void ChatSession::__set_entities(const std::vector<Entity> & val) {
  this->entities = val;
__isset.entities = true;
}

void ChatSession::__set_branch(const std::string& val) {
  this->branch = val;
__isset.branch = true;
}

void ChatSession::__set_createdate(const Timestamp& val) {
  this->createdate = val;
__isset.createdate = true;
}

void ChatSession::__set_updatedate(const Timestamp& val) {
  this->updatedate = val;
__isset.updatedate = true;
}
std::ostream& operator<<(std::ostream& out, const ChatSession& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ChatSession::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->intent_name);
          this->__isset.intent_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatbotID);
          this->__isset.chatbotID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channel);
          this->__isset.channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->resolved);
          this->__isset.resolved = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->entities.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->entities.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += this->entities[_i22].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.entities = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->branch);
          this->__isset.branch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createdate);
          this->__isset.createdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->updatedate);
          this->__isset.updatedate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ChatSession::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ChatSession");

  if (this->__isset.intent_name) {
    xfer += oprot->writeFieldBegin("intent_name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->intent_name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.chatbotID) {
    xfer += oprot->writeFieldBegin("chatbotID", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->chatbotID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uid) {
    xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->uid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.channel) {
    xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->channel);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resolved) {
    xfer += oprot->writeFieldBegin("resolved", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->resolved);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.entities) {
    xfer += oprot->writeFieldBegin("entities", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->entities.size()));
      std::vector<Entity> ::const_iterator _iter23;
      for (_iter23 = this->entities.begin(); _iter23 != this->entities.end(); ++_iter23)
      {
        xfer += (*_iter23).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.branch) {
    xfer += oprot->writeFieldBegin("branch", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->branch);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createdate) {
    xfer += oprot->writeFieldBegin("createdate", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->createdate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updatedate) {
    xfer += oprot->writeFieldBegin("updatedate", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->updatedate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ChatSession &a, ChatSession &b) {
  using ::std::swap;
  swap(a.intent_name, b.intent_name);
  swap(a.chatbotID, b.chatbotID);
  swap(a.uid, b.uid);
  swap(a.channel, b.channel);
  swap(a.resolved, b.resolved);
  swap(a.id, b.id);
  swap(a.entities, b.entities);
  swap(a.branch, b.branch);
  swap(a.createdate, b.createdate);
  swap(a.updatedate, b.updatedate);
  swap(a.__isset, b.__isset);
}

ChatSession::ChatSession(const ChatSession& other24) {
  intent_name = other24.intent_name;
  chatbotID = other24.chatbotID;
  uid = other24.uid;
  channel = other24.channel;
  resolved = other24.resolved;
  id = other24.id;
  entities = other24.entities;
  branch = other24.branch;
  createdate = other24.createdate;
  updatedate = other24.updatedate;
  __isset = other24.__isset;
}
ChatSession& ChatSession::operator=(const ChatSession& other25) {
  intent_name = other25.intent_name;
  chatbotID = other25.chatbotID;
  uid = other25.uid;
  channel = other25.channel;
  resolved = other25.resolved;
  id = other25.id;
  entities = other25.entities;
  branch = other25.branch;
  createdate = other25.createdate;
  updatedate = other25.updatedate;
  __isset = other25.__isset;
  return *this;
}
void ChatSession::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ChatSession(";
  out << "intent_name="; (__isset.intent_name ? (out << to_string(intent_name)) : (out << "<null>"));
  out << ", " << "chatbotID="; (__isset.chatbotID ? (out << to_string(chatbotID)) : (out << "<null>"));
  out << ", " << "uid="; (__isset.uid ? (out << to_string(uid)) : (out << "<null>"));
  out << ", " << "channel="; (__isset.channel ? (out << to_string(channel)) : (out << "<null>"));
  out << ", " << "resolved="; (__isset.resolved ? (out << to_string(resolved)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "entities="; (__isset.entities ? (out << to_string(entities)) : (out << "<null>"));
  out << ", " << "branch="; (__isset.branch ? (out << to_string(branch)) : (out << "<null>"));
  out << ", " << "createdate="; (__isset.createdate ? (out << to_string(createdate)) : (out << "<null>"));
  out << ", " << "updatedate="; (__isset.updatedate ? (out << to_string(updatedate)) : (out << "<null>"));
  out << ")";
}


DictWord::~DictWord() throw() {
}


void DictWord::__set_word(const std::string& val) {
  this->word = val;
__isset.word = true;
}

void DictWord::__set_dict_id(const std::string& val) {
  this->dict_id = val;
__isset.dict_id = true;
}

void DictWord::__set_synonyms(const std::string& val) {
  this->synonyms = val;
__isset.synonyms = true;
}

void DictWord::__set_tag(const std::string& val) {
  this->tag = val;
__isset.tag = true;
}

void DictWord::__set_lang(const std::string& val) {
  this->lang = val;
__isset.lang = true;
}

void DictWord::__set_createdate(const Timestamp& val) {
  this->createdate = val;
__isset.createdate = true;
}

void DictWord::__set_updatedate(const Timestamp& val) {
  this->updatedate = val;
__isset.updatedate = true;
}
std::ostream& operator<<(std::ostream& out, const DictWord& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DictWord::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->word);
          this->__isset.word = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dict_id);
          this->__isset.dict_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->synonyms);
          this->__isset.synonyms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tag);
          this->__isset.tag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lang);
          this->__isset.lang = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createdate);
          this->__isset.createdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->updatedate);
          this->__isset.updatedate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DictWord::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DictWord");

  if (this->__isset.word) {
    xfer += oprot->writeFieldBegin("word", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->word);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dict_id) {
    xfer += oprot->writeFieldBegin("dict_id", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->dict_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.synonyms) {
    xfer += oprot->writeFieldBegin("synonyms", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->synonyms);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tag) {
    xfer += oprot->writeFieldBegin("tag", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->tag);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lang) {
    xfer += oprot->writeFieldBegin("lang", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->lang);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createdate) {
    xfer += oprot->writeFieldBegin("createdate", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->createdate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updatedate) {
    xfer += oprot->writeFieldBegin("updatedate", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->updatedate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DictWord &a, DictWord &b) {
  using ::std::swap;
  swap(a.word, b.word);
  swap(a.dict_id, b.dict_id);
  swap(a.synonyms, b.synonyms);
  swap(a.tag, b.tag);
  swap(a.lang, b.lang);
  swap(a.createdate, b.createdate);
  swap(a.updatedate, b.updatedate);
  swap(a.__isset, b.__isset);
}

DictWord::DictWord(const DictWord& other26) {
  word = other26.word;
  dict_id = other26.dict_id;
  synonyms = other26.synonyms;
  tag = other26.tag;
  lang = other26.lang;
  createdate = other26.createdate;
  updatedate = other26.updatedate;
  __isset = other26.__isset;
}
DictWord& DictWord::operator=(const DictWord& other27) {
  word = other27.word;
  dict_id = other27.dict_id;
  synonyms = other27.synonyms;
  tag = other27.tag;
  lang = other27.lang;
  createdate = other27.createdate;
  updatedate = other27.updatedate;
  __isset = other27.__isset;
  return *this;
}
void DictWord::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DictWord(";
  out << "word="; (__isset.word ? (out << to_string(word)) : (out << "<null>"));
  out << ", " << "dict_id="; (__isset.dict_id ? (out << to_string(dict_id)) : (out << "<null>"));
  out << ", " << "synonyms="; (__isset.synonyms ? (out << to_string(synonyms)) : (out << "<null>"));
  out << ", " << "tag="; (__isset.tag ? (out << to_string(tag)) : (out << "<null>"));
  out << ", " << "lang="; (__isset.lang ? (out << to_string(lang)) : (out << "<null>"));
  out << ", " << "createdate="; (__isset.createdate ? (out << to_string(createdate)) : (out << "<null>"));
  out << ", " << "updatedate="; (__isset.updatedate ? (out << to_string(updatedate)) : (out << "<null>"));
  out << ")";
}


DictPattern::~DictPattern() throw() {
}


void DictPattern::__set_id(const std::string& val) {
  this->id = val;
__isset.id = true;
}

void DictPattern::__set_dict_id(const std::string& val) {
  this->dict_id = val;
__isset.dict_id = true;
}

void DictPattern::__set_patterns(const std::vector<std::string> & val) {
  this->patterns = val;
__isset.patterns = true;
}

void DictPattern::__set_standard(const std::string& val) {
  this->standard = val;
__isset.standard = true;
}

void DictPattern::__set_createdate(const Timestamp& val) {
  this->createdate = val;
__isset.createdate = true;
}

void DictPattern::__set_updatedate(const Timestamp& val) {
  this->updatedate = val;
__isset.updatedate = true;
}
std::ostream& operator<<(std::ostream& out, const DictPattern& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DictPattern::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dict_id);
          this->__isset.dict_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->patterns.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            this->patterns.resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              xfer += iprot->readString(this->patterns[_i32]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.patterns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->standard);
          this->__isset.standard = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createdate);
          this->__isset.createdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->updatedate);
          this->__isset.updatedate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DictPattern::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DictPattern");

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dict_id) {
    xfer += oprot->writeFieldBegin("dict_id", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->dict_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.patterns) {
    xfer += oprot->writeFieldBegin("patterns", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->patterns.size()));
      std::vector<std::string> ::const_iterator _iter33;
      for (_iter33 = this->patterns.begin(); _iter33 != this->patterns.end(); ++_iter33)
      {
        xfer += oprot->writeString((*_iter33));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.standard) {
    xfer += oprot->writeFieldBegin("standard", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->standard);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createdate) {
    xfer += oprot->writeFieldBegin("createdate", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->createdate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updatedate) {
    xfer += oprot->writeFieldBegin("updatedate", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->updatedate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DictPattern &a, DictPattern &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.dict_id, b.dict_id);
  swap(a.patterns, b.patterns);
  swap(a.standard, b.standard);
  swap(a.createdate, b.createdate);
  swap(a.updatedate, b.updatedate);
  swap(a.__isset, b.__isset);
}

DictPattern::DictPattern(const DictPattern& other34) {
  id = other34.id;
  dict_id = other34.dict_id;
  patterns = other34.patterns;
  standard = other34.standard;
  createdate = other34.createdate;
  updatedate = other34.updatedate;
  __isset = other34.__isset;
}
DictPattern& DictPattern::operator=(const DictPattern& other35) {
  id = other35.id;
  dict_id = other35.dict_id;
  patterns = other35.patterns;
  standard = other35.standard;
  createdate = other35.createdate;
  updatedate = other35.updatedate;
  __isset = other35.__isset;
  return *this;
}
void DictPattern::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DictPattern(";
  out << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "dict_id="; (__isset.dict_id ? (out << to_string(dict_id)) : (out << "<null>"));
  out << ", " << "patterns="; (__isset.patterns ? (out << to_string(patterns)) : (out << "<null>"));
  out << ", " << "standard="; (__isset.standard ? (out << to_string(standard)) : (out << "<null>"));
  out << ", " << "createdate="; (__isset.createdate ? (out << to_string(createdate)) : (out << "<null>"));
  out << ", " << "updatedate="; (__isset.updatedate ? (out << to_string(updatedate)) : (out << "<null>"));
  out << ")";
}


DictPatternCheck::~DictPatternCheck() throw() {
}


void DictPatternCheck::__set_id(const std::string& val) {
  this->id = val;
__isset.id = true;
}

void DictPatternCheck::__set_dict_id(const std::string& val) {
  this->dict_id = val;
__isset.dict_id = true;
}

void DictPatternCheck::__set_input(const std::string& val) {
  this->input = val;
__isset.input = true;
}

void DictPatternCheck::__set_output(const std::string& val) {
  this->output = val;
__isset.output = true;
}

void DictPatternCheck::__set_createdate(const Timestamp& val) {
  this->createdate = val;
__isset.createdate = true;
}
std::ostream& operator<<(std::ostream& out, const DictPatternCheck& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DictPatternCheck::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dict_id);
          this->__isset.dict_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->input);
          this->__isset.input = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->output);
          this->__isset.output = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createdate);
          this->__isset.createdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DictPatternCheck::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DictPatternCheck");

  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dict_id) {
    xfer += oprot->writeFieldBegin("dict_id", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->dict_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.input) {
    xfer += oprot->writeFieldBegin("input", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->input);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.output) {
    xfer += oprot->writeFieldBegin("output", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->output);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createdate) {
    xfer += oprot->writeFieldBegin("createdate", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->createdate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DictPatternCheck &a, DictPatternCheck &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.dict_id, b.dict_id);
  swap(a.input, b.input);
  swap(a.output, b.output);
  swap(a.createdate, b.createdate);
  swap(a.__isset, b.__isset);
}

DictPatternCheck::DictPatternCheck(const DictPatternCheck& other36) {
  id = other36.id;
  dict_id = other36.dict_id;
  input = other36.input;
  output = other36.output;
  createdate = other36.createdate;
  __isset = other36.__isset;
}
DictPatternCheck& DictPatternCheck::operator=(const DictPatternCheck& other37) {
  id = other37.id;
  dict_id = other37.dict_id;
  input = other37.input;
  output = other37.output;
  createdate = other37.createdate;
  __isset = other37.__isset;
  return *this;
}
void DictPatternCheck::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DictPatternCheck(";
  out << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "dict_id="; (__isset.dict_id ? (out << to_string(dict_id)) : (out << "<null>"));
  out << ", " << "input="; (__isset.input ? (out << to_string(input)) : (out << "<null>"));
  out << ", " << "output="; (__isset.output ? (out << to_string(output)) : (out << "<null>"));
  out << ", " << "createdate="; (__isset.createdate ? (out << to_string(createdate)) : (out << "<null>"));
  out << ")";
}


Dict::~Dict() throw() {
}


void Dict::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void Dict::__set_chatbotID(const std::string& val) {
  this->chatbotID = val;
__isset.chatbotID = true;
}

void Dict::__set_builtin(const bool val) {
  this->builtin = val;
__isset.builtin = true;
}

void Dict::__set_active(const bool val) {
  this->active = val;
__isset.active = true;
}

void Dict::__set_id(const std::string& val) {
  this->id = val;
__isset.id = true;
}

void Dict::__set_description(const std::string& val) {
  this->description = val;
__isset.description = true;
}

void Dict::__set_samples(const std::string& val) {
  this->samples = val;
__isset.samples = true;
}

void Dict::__set_createdate(const Timestamp& val) {
  this->createdate = val;
__isset.createdate = true;
}

void Dict::__set_updatedate(const Timestamp& val) {
  this->updatedate = val;
__isset.updatedate = true;
}

void Dict::__set_referred(const bool val) {
  this->referred = val;
__isset.referred = true;
}

void Dict::__set_type(const std::string& val) {
  this->type = val;
__isset.type = true;
}

void Dict::__set_vendor(const std::string& val) {
  this->vendor = val;
__isset.vendor = true;
}

void Dict::__set_used(const bool val) {
  this->used = val;
__isset.used = true;
}
std::ostream& operator<<(std::ostream& out, const Dict& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Dict::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatbotID);
          this->__isset.chatbotID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->builtin);
          this->__isset.builtin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->samples);
          this->__isset.samples = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createdate);
          this->__isset.createdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->updatedate);
          this->__isset.updatedate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->referred);
          this->__isset.referred = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->vendor);
          this->__isset.vendor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->used);
          this->__isset.used = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Dict::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Dict");

  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.chatbotID) {
    xfer += oprot->writeFieldBegin("chatbotID", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->chatbotID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.builtin) {
    xfer += oprot->writeFieldBegin("builtin", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->builtin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.active) {
    xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->active);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->description);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.samples) {
    xfer += oprot->writeFieldBegin("samples", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->samples);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createdate) {
    xfer += oprot->writeFieldBegin("createdate", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->createdate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updatedate) {
    xfer += oprot->writeFieldBegin("updatedate", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->updatedate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.referred) {
    xfer += oprot->writeFieldBegin("referred", ::apache::thrift::protocol::T_BOOL, 10);
    xfer += oprot->writeBool(this->referred);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.vendor) {
    xfer += oprot->writeFieldBegin("vendor", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->vendor);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.used) {
    xfer += oprot->writeFieldBegin("used", ::apache::thrift::protocol::T_BOOL, 13);
    xfer += oprot->writeBool(this->used);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Dict &a, Dict &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.chatbotID, b.chatbotID);
  swap(a.builtin, b.builtin);
  swap(a.active, b.active);
  swap(a.id, b.id);
  swap(a.description, b.description);
  swap(a.samples, b.samples);
  swap(a.createdate, b.createdate);
  swap(a.updatedate, b.updatedate);
  swap(a.referred, b.referred);
  swap(a.type, b.type);
  swap(a.vendor, b.vendor);
  swap(a.used, b.used);
  swap(a.__isset, b.__isset);
}

Dict::Dict(const Dict& other38) {
  name = other38.name;
  chatbotID = other38.chatbotID;
  builtin = other38.builtin;
  active = other38.active;
  id = other38.id;
  description = other38.description;
  samples = other38.samples;
  createdate = other38.createdate;
  updatedate = other38.updatedate;
  referred = other38.referred;
  type = other38.type;
  vendor = other38.vendor;
  used = other38.used;
  __isset = other38.__isset;
}
Dict& Dict::operator=(const Dict& other39) {
  name = other39.name;
  chatbotID = other39.chatbotID;
  builtin = other39.builtin;
  active = other39.active;
  id = other39.id;
  description = other39.description;
  samples = other39.samples;
  createdate = other39.createdate;
  updatedate = other39.updatedate;
  referred = other39.referred;
  type = other39.type;
  vendor = other39.vendor;
  used = other39.used;
  __isset = other39.__isset;
  return *this;
}
void Dict::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Dict(";
  out << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "chatbotID="; (__isset.chatbotID ? (out << to_string(chatbotID)) : (out << "<null>"));
  out << ", " << "builtin="; (__isset.builtin ? (out << to_string(builtin)) : (out << "<null>"));
  out << ", " << "active="; (__isset.active ? (out << to_string(active)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "description="; (__isset.description ? (out << to_string(description)) : (out << "<null>"));
  out << ", " << "samples="; (__isset.samples ? (out << to_string(samples)) : (out << "<null>"));
  out << ", " << "createdate="; (__isset.createdate ? (out << to_string(createdate)) : (out << "<null>"));
  out << ", " << "updatedate="; (__isset.updatedate ? (out << to_string(updatedate)) : (out << "<null>"));
  out << ", " << "referred="; (__isset.referred ? (out << to_string(referred)) : (out << "<null>"));
  out << ", " << "type="; (__isset.type ? (out << to_string(type)) : (out << "<null>"));
  out << ", " << "vendor="; (__isset.vendor ? (out << to_string(vendor)) : (out << "<null>"));
  out << ", " << "used="; (__isset.used ? (out << to_string(used)) : (out << "<null>"));
  out << ")";
}


Intent::~Intent() throw() {
}


void Intent::__set_chatbotID(const std::string& val) {
  this->chatbotID = val;
__isset.chatbotID = true;
}

void Intent::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void Intent::__set_id(const std::string& val) {
  this->id = val;
__isset.id = true;
}

void Intent::__set_description(const std::string& val) {
  this->description = val;
__isset.description = true;
}

void Intent::__set_createdate(const Timestamp& val) {
  this->createdate = val;
__isset.createdate = true;
}

void Intent::__set_updatedate(const Timestamp& val) {
  this->updatedate = val;
__isset.updatedate = true;
}
std::ostream& operator<<(std::ostream& out, const Intent& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Intent::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatbotID);
          this->__isset.chatbotID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createdate);
          this->__isset.createdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->updatedate);
          this->__isset.updatedate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Intent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Intent");

  if (this->__isset.chatbotID) {
    xfer += oprot->writeFieldBegin("chatbotID", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->chatbotID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->description);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createdate) {
    xfer += oprot->writeFieldBegin("createdate", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->createdate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updatedate) {
    xfer += oprot->writeFieldBegin("updatedate", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->updatedate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Intent &a, Intent &b) {
  using ::std::swap;
  swap(a.chatbotID, b.chatbotID);
  swap(a.name, b.name);
  swap(a.id, b.id);
  swap(a.description, b.description);
  swap(a.createdate, b.createdate);
  swap(a.updatedate, b.updatedate);
  swap(a.__isset, b.__isset);
}

Intent::Intent(const Intent& other40) {
  chatbotID = other40.chatbotID;
  name = other40.name;
  id = other40.id;
  description = other40.description;
  createdate = other40.createdate;
  updatedate = other40.updatedate;
  __isset = other40.__isset;
}
Intent& Intent::operator=(const Intent& other41) {
  chatbotID = other41.chatbotID;
  name = other41.name;
  id = other41.id;
  description = other41.description;
  createdate = other41.createdate;
  updatedate = other41.updatedate;
  __isset = other41.__isset;
  return *this;
}
void Intent::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Intent(";
  out << "chatbotID="; (__isset.chatbotID ? (out << to_string(chatbotID)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "description="; (__isset.description ? (out << to_string(description)) : (out << "<null>"));
  out << ", " << "createdate="; (__isset.createdate ? (out << to_string(createdate)) : (out << "<null>"));
  out << ", " << "updatedate="; (__isset.updatedate ? (out << to_string(updatedate)) : (out << "<null>"));
  out << ")";
}


IntentSlot::~IntentSlot() throw() {
}


void IntentSlot::__set_intent_id(const std::string& val) {
  this->intent_id = val;
__isset.intent_id = true;
}

void IntentSlot::__set_name(const std::string& val) {
  this->name = val;
__isset.name = true;
}

void IntentSlot::__set_dict_id(const std::string& val) {
  this->dict_id = val;
__isset.dict_id = true;
}

void IntentSlot::__set_requires(const bool val) {
  this->requires = val;
__isset.requires = true;
}

void IntentSlot::__set_id(const std::string& val) {
  this->id = val;
__isset.id = true;
}

void IntentSlot::__set_createdate(const Timestamp& val) {
  this->createdate = val;
__isset.createdate = true;
}

void IntentSlot::__set_updatedate(const Timestamp& val) {
  this->updatedate = val;
__isset.updatedate = true;
}

void IntentSlot::__set_question(const std::string& val) {
  this->question = val;
__isset.question = true;
}

void IntentSlot::__set_dict(const Dict& val) {
  this->dict = val;
__isset.dict = true;
}
std::ostream& operator<<(std::ostream& out, const IntentSlot& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t IntentSlot::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->intent_id);
          this->__isset.intent_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dict_id);
          this->__isset.dict_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->requires);
          this->__isset.requires = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createdate);
          this->__isset.createdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->updatedate);
          this->__isset.updatedate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->question);
          this->__isset.question = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dict.read(iprot);
          this->__isset.dict = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IntentSlot::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IntentSlot");

  if (this->__isset.intent_id) {
    xfer += oprot->writeFieldBegin("intent_id", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->intent_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dict_id) {
    xfer += oprot->writeFieldBegin("dict_id", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->dict_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requires) {
    xfer += oprot->writeFieldBegin("requires", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->requires);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createdate) {
    xfer += oprot->writeFieldBegin("createdate", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->createdate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updatedate) {
    xfer += oprot->writeFieldBegin("updatedate", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->updatedate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.question) {
    xfer += oprot->writeFieldBegin("question", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->question);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dict) {
    xfer += oprot->writeFieldBegin("dict", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->dict.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IntentSlot &a, IntentSlot &b) {
  using ::std::swap;
  swap(a.intent_id, b.intent_id);
  swap(a.name, b.name);
  swap(a.dict_id, b.dict_id);
  swap(a.requires, b.requires);
  swap(a.id, b.id);
  swap(a.createdate, b.createdate);
  swap(a.updatedate, b.updatedate);
  swap(a.question, b.question);
  swap(a.dict, b.dict);
  swap(a.__isset, b.__isset);
}

IntentSlot::IntentSlot(const IntentSlot& other42) {
  intent_id = other42.intent_id;
  name = other42.name;
  dict_id = other42.dict_id;
  requires = other42.requires;
  id = other42.id;
  createdate = other42.createdate;
  updatedate = other42.updatedate;
  question = other42.question;
  dict = other42.dict;
  __isset = other42.__isset;
}
IntentSlot& IntentSlot::operator=(const IntentSlot& other43) {
  intent_id = other43.intent_id;
  name = other43.name;
  dict_id = other43.dict_id;
  requires = other43.requires;
  id = other43.id;
  createdate = other43.createdate;
  updatedate = other43.updatedate;
  question = other43.question;
  dict = other43.dict;
  __isset = other43.__isset;
  return *this;
}
void IntentSlot::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IntentSlot(";
  out << "intent_id="; (__isset.intent_id ? (out << to_string(intent_id)) : (out << "<null>"));
  out << ", " << "name="; (__isset.name ? (out << to_string(name)) : (out << "<null>"));
  out << ", " << "dict_id="; (__isset.dict_id ? (out << to_string(dict_id)) : (out << "<null>"));
  out << ", " << "requires="; (__isset.requires ? (out << to_string(requires)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "createdate="; (__isset.createdate ? (out << to_string(createdate)) : (out << "<null>"));
  out << ", " << "updatedate="; (__isset.updatedate ? (out << to_string(updatedate)) : (out << "<null>"));
  out << ", " << "question="; (__isset.question ? (out << to_string(question)) : (out << "<null>"));
  out << ", " << "dict="; (__isset.dict ? (out << to_string(dict)) : (out << "<null>"));
  out << ")";
}


IntentUtter::~IntentUtter() throw() {
}


void IntentUtter::__set_intent_id(const std::string& val) {
  this->intent_id = val;
__isset.intent_id = true;
}

void IntentUtter::__set_utterance(const std::string& val) {
  this->utterance = val;
__isset.utterance = true;
}

void IntentUtter::__set_id(const std::string& val) {
  this->id = val;
__isset.id = true;
}

void IntentUtter::__set_createdate(const Timestamp& val) {
  this->createdate = val;
__isset.createdate = true;
}

void IntentUtter::__set_updatedate(const Timestamp& val) {
  this->updatedate = val;
__isset.updatedate = true;
}
std::ostream& operator<<(std::ostream& out, const IntentUtter& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t IntentUtter::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->intent_id);
          this->__isset.intent_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->utterance);
          this->__isset.utterance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createdate);
          this->__isset.createdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->updatedate);
          this->__isset.updatedate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IntentUtter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IntentUtter");

  if (this->__isset.intent_id) {
    xfer += oprot->writeFieldBegin("intent_id", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->intent_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.utterance) {
    xfer += oprot->writeFieldBegin("utterance", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->utterance);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createdate) {
    xfer += oprot->writeFieldBegin("createdate", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->createdate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.updatedate) {
    xfer += oprot->writeFieldBegin("updatedate", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->updatedate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IntentUtter &a, IntentUtter &b) {
  using ::std::swap;
  swap(a.intent_id, b.intent_id);
  swap(a.utterance, b.utterance);
  swap(a.id, b.id);
  swap(a.createdate, b.createdate);
  swap(a.updatedate, b.updatedate);
  swap(a.__isset, b.__isset);
}

IntentUtter::IntentUtter(const IntentUtter& other44) {
  intent_id = other44.intent_id;
  utterance = other44.utterance;
  id = other44.id;
  createdate = other44.createdate;
  updatedate = other44.updatedate;
  __isset = other44.__isset;
}
IntentUtter& IntentUtter::operator=(const IntentUtter& other45) {
  intent_id = other45.intent_id;
  utterance = other45.utterance;
  id = other45.id;
  createdate = other45.createdate;
  updatedate = other45.updatedate;
  __isset = other45.__isset;
  return *this;
}
void IntentUtter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IntentUtter(";
  out << "intent_id="; (__isset.intent_id ? (out << to_string(intent_id)) : (out << "<null>"));
  out << ", " << "utterance="; (__isset.utterance ? (out << to_string(utterance)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "createdate="; (__isset.createdate ? (out << to_string(createdate)) : (out << "<null>"));
  out << ", " << "updatedate="; (__isset.updatedate ? (out << to_string(updatedate)) : (out << "<null>"));
  out << ")";
}


ProdVersion::~ProdVersion() throw() {
}


void ProdVersion::__set_chatbotID(const std::string& val) {
  this->chatbotID = val;
__isset.chatbotID = true;
}

void ProdVersion::__set_version(const std::string& val) {
  this->version = val;
__isset.version = true;
}

void ProdVersion::__set_active(const bool val) {
  this->active = val;
__isset.active = true;
}

void ProdVersion::__set_latest(const bool val) {
  this->latest = val;
__isset.latest = true;
}

void ProdVersion::__set_id(const std::string& val) {
  this->id = val;
__isset.id = true;
}

void ProdVersion::__set_operated(const std::string& val) {
  this->operated = val;
__isset.operated = true;
}

void ProdVersion::__set_notes(const std::string& val) {
  this->notes = val;
__isset.notes = true;
}

void ProdVersion::__set_createdate(const Timestamp& val) {
  this->createdate = val;
__isset.createdate = true;
}
std::ostream& operator<<(std::ostream& out, const ProdVersion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ProdVersion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatbotID);
          this->__isset.chatbotID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->active);
          this->__isset.active = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->latest);
          this->__isset.latest = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->operated);
          this->__isset.operated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notes);
          this->__isset.notes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createdate);
          this->__isset.createdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProdVersion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ProdVersion");

  if (this->__isset.chatbotID) {
    xfer += oprot->writeFieldBegin("chatbotID", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->chatbotID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.version) {
    xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->version);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.active) {
    xfer += oprot->writeFieldBegin("active", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->active);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.latest) {
    xfer += oprot->writeFieldBegin("latest", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->latest);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.operated) {
    xfer += oprot->writeFieldBegin("operated", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->operated);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.notes) {
    xfer += oprot->writeFieldBegin("notes", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->notes);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createdate) {
    xfer += oprot->writeFieldBegin("createdate", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->createdate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProdVersion &a, ProdVersion &b) {
  using ::std::swap;
  swap(a.chatbotID, b.chatbotID);
  swap(a.version, b.version);
  swap(a.active, b.active);
  swap(a.latest, b.latest);
  swap(a.id, b.id);
  swap(a.operated, b.operated);
  swap(a.notes, b.notes);
  swap(a.createdate, b.createdate);
  swap(a.__isset, b.__isset);
}

ProdVersion::ProdVersion(const ProdVersion& other46) {
  chatbotID = other46.chatbotID;
  version = other46.version;
  active = other46.active;
  latest = other46.latest;
  id = other46.id;
  operated = other46.operated;
  notes = other46.notes;
  createdate = other46.createdate;
  __isset = other46.__isset;
}
ProdVersion& ProdVersion::operator=(const ProdVersion& other47) {
  chatbotID = other47.chatbotID;
  version = other47.version;
  active = other47.active;
  latest = other47.latest;
  id = other47.id;
  operated = other47.operated;
  notes = other47.notes;
  createdate = other47.createdate;
  __isset = other47.__isset;
  return *this;
}
void ProdVersion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ProdVersion(";
  out << "chatbotID="; (__isset.chatbotID ? (out << to_string(chatbotID)) : (out << "<null>"));
  out << ", " << "version="; (__isset.version ? (out << to_string(version)) : (out << "<null>"));
  out << ", " << "active="; (__isset.active ? (out << to_string(active)) : (out << "<null>"));
  out << ", " << "latest="; (__isset.latest ? (out << to_string(latest)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "operated="; (__isset.operated ? (out << to_string(operated)) : (out << "<null>"));
  out << ", " << "notes="; (__isset.notes ? (out << to_string(notes)) : (out << "<null>"));
  out << ", " << "createdate="; (__isset.createdate ? (out << to_string(createdate)) : (out << "<null>"));
  out << ")";
}


DevelopVersion::~DevelopVersion() throw() {
}


void DevelopVersion::__set_chatbotID(const std::string& val) {
  this->chatbotID = val;
__isset.chatbotID = true;
}

void DevelopVersion::__set_version(const std::string& val) {
  this->version = val;
__isset.version = true;
}

void DevelopVersion::__set_published(const bool val) {
  this->published = val;
__isset.published = true;
}

void DevelopVersion::__set_id(const std::string& val) {
  this->id = val;
__isset.id = true;
}

void DevelopVersion::__set_createdate(const Timestamp& val) {
  this->createdate = val;
__isset.createdate = true;
}

void DevelopVersion::__set_operated(const std::string& val) {
  this->operated = val;
__isset.operated = true;
}
std::ostream& operator<<(std::ostream& out, const DevelopVersion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t DevelopVersion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatbotID);
          this->__isset.chatbotID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->published);
          this->__isset.published = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createdate);
          this->__isset.createdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->operated);
          this->__isset.operated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DevelopVersion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DevelopVersion");

  if (this->__isset.chatbotID) {
    xfer += oprot->writeFieldBegin("chatbotID", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->chatbotID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.version) {
    xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->version);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.published) {
    xfer += oprot->writeFieldBegin("published", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->published);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createdate) {
    xfer += oprot->writeFieldBegin("createdate", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->createdate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.operated) {
    xfer += oprot->writeFieldBegin("operated", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->operated);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DevelopVersion &a, DevelopVersion &b) {
  using ::std::swap;
  swap(a.chatbotID, b.chatbotID);
  swap(a.version, b.version);
  swap(a.published, b.published);
  swap(a.id, b.id);
  swap(a.createdate, b.createdate);
  swap(a.operated, b.operated);
  swap(a.__isset, b.__isset);
}

DevelopVersion::DevelopVersion(const DevelopVersion& other48) {
  chatbotID = other48.chatbotID;
  version = other48.version;
  published = other48.published;
  id = other48.id;
  createdate = other48.createdate;
  operated = other48.operated;
  __isset = other48.__isset;
}
DevelopVersion& DevelopVersion::operator=(const DevelopVersion& other49) {
  chatbotID = other49.chatbotID;
  version = other49.version;
  published = other49.published;
  id = other49.id;
  createdate = other49.createdate;
  operated = other49.operated;
  __isset = other49.__isset;
  return *this;
}
void DevelopVersion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DevelopVersion(";
  out << "chatbotID="; (__isset.chatbotID ? (out << to_string(chatbotID)) : (out << "<null>"));
  out << ", " << "version="; (__isset.version ? (out << to_string(version)) : (out << "<null>"));
  out << ", " << "published="; (__isset.published ? (out << to_string(published)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "createdate="; (__isset.createdate ? (out << to_string(createdate)) : (out << "<null>"));
  out << ", " << "operated="; (__isset.operated ? (out << to_string(operated)) : (out << "<null>"));
  out << ")";
}


Data::~Data() throw() {
}


void Data::__set_rc(const int32_t val) {
  this->rc = val;
__isset.rc = true;
}

void Data::__set_error(const std::string& val) {
  this->error = val;
__isset.error = true;
}

void Data::__set_msg(const std::string& val) {
  this->msg = val;
__isset.msg = true;
}

void Data::__set_id(const std::string& val) {
  this->id = val;
__isset.id = true;
}

void Data::__set_chatbotID(const std::string& val) {
  this->chatbotID = val;
__isset.chatbotID = true;
}

void Data::__set_customdicts(const std::vector<CustomDict> & val) {
  this->customdicts = val;
__isset.customdicts = true;
}

void Data::__set_sysdicts(const std::vector<SysDict> & val) {
  this->sysdicts = val;
__isset.sysdicts = true;
}

void Data::__set_botsysdicts(const std::vector<BotSysdict> & val) {
  this->botsysdicts = val;
__isset.botsysdicts = true;
}

void Data::__set_dictwords(const std::vector<DictWord> & val) {
  this->dictwords = val;
__isset.dictwords = true;
}

void Data::__set_customdict(const CustomDict& val) {
  this->customdict = val;
__isset.customdict = true;
}

void Data::__set_sysdict(const SysDict& val) {
  this->sysdict = val;
__isset.sysdict = true;
}

void Data::__set_botsysdict(const BotSysdict& val) {
  this->botsysdict = val;
__isset.botsysdict = true;
}

void Data::__set_dictword(const DictWord& val) {
  this->dictword = val;
__isset.dictword = true;
}

void Data::__set_dictpattern(const DictPattern& val) {
  this->dictpattern = val;
__isset.dictpattern = true;
}

void Data::__set_patterncheck(const DictPatternCheck& val) {
  this->patterncheck = val;
__isset.patterncheck = true;
}

void Data::__set_patternchecks(const std::vector<DictPatternCheck> & val) {
  this->patternchecks = val;
__isset.patternchecks = true;
}

void Data::__set_intents(const std::vector<Intent> & val) {
  this->intents = val;
__isset.intents = true;
}

void Data::__set_slots(const std::vector<IntentSlot> & val) {
  this->slots = val;
__isset.slots = true;
}

void Data::__set_utters(const std::vector<IntentUtter> & val) {
  this->utters = val;
__isset.utters = true;
}

void Data::__set_intent(const Intent& val) {
  this->intent = val;
__isset.intent = true;
}

void Data::__set_slot(const IntentSlot& val) {
  this->slot = val;
__isset.slot = true;
}

void Data::__set_utter(const IntentUtter& val) {
  this->utter = val;
__isset.utter = true;
}

void Data::__set_devvers(const std::vector<DevelopVersion> & val) {
  this->devvers = val;
__isset.devvers = true;
}

void Data::__set_provers(const std::vector<ProdVersion> & val) {
  this->provers = val;
__isset.provers = true;
}

void Data::__set_devver(const DevelopVersion& val) {
  this->devver = val;
__isset.devver = true;
}

void Data::__set_prover(const ProdVersion& val) {
  this->prover = val;
__isset.prover = true;
}

void Data::__set_sessions(const std::vector<ChatSession> & val) {
  this->sessions = val;
__isset.sessions = true;
}

void Data::__set_messages(const std::vector<ChatMessage> & val) {
  this->messages = val;
__isset.messages = true;
}

void Data::__set_session(const ChatSession& val) {
  this->session = val;
__isset.session = true;
}

void Data::__set_message(const ChatMessage& val) {
  this->message = val;
__isset.message = true;
}

void Data::__set_currpage(const int32_t val) {
  this->currpage = val;
__isset.currpage = true;
}

void Data::__set_totalpage(const int32_t val) {
  this->totalpage = val;
__isset.totalpage = true;
}

void Data::__set_totalrows(const int32_t val) {
  this->totalrows = val;
__isset.totalrows = true;
}

void Data::__set_pagesize(const int32_t val) {
  this->pagesize = val;
__isset.pagesize = true;
}

void Data::__set_page(const int32_t val) {
  this->page = val;
__isset.page = true;
}

void Data::__set_query(const std::string& val) {
  this->query = val;
__isset.query = true;
}
std::ostream& operator<<(std::ostream& out, const Data& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Data::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rc);
          this->__isset.rc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->error);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->chatbotID);
          this->__isset.chatbotID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->customdicts.clear();
            uint32_t _size50;
            ::apache::thrift::protocol::TType _etype53;
            xfer += iprot->readListBegin(_etype53, _size50);
            this->customdicts.resize(_size50);
            uint32_t _i54;
            for (_i54 = 0; _i54 < _size50; ++_i54)
            {
              xfer += this->customdicts[_i54].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.customdicts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sysdicts.clear();
            uint32_t _size55;
            ::apache::thrift::protocol::TType _etype58;
            xfer += iprot->readListBegin(_etype58, _size55);
            this->sysdicts.resize(_size55);
            uint32_t _i59;
            for (_i59 = 0; _i59 < _size55; ++_i59)
            {
              xfer += this->sysdicts[_i59].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sysdicts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->botsysdicts.clear();
            uint32_t _size60;
            ::apache::thrift::protocol::TType _etype63;
            xfer += iprot->readListBegin(_etype63, _size60);
            this->botsysdicts.resize(_size60);
            uint32_t _i64;
            for (_i64 = 0; _i64 < _size60; ++_i64)
            {
              xfer += this->botsysdicts[_i64].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.botsysdicts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->dictwords.clear();
            uint32_t _size65;
            ::apache::thrift::protocol::TType _etype68;
            xfer += iprot->readListBegin(_etype68, _size65);
            this->dictwords.resize(_size65);
            uint32_t _i69;
            for (_i69 = 0; _i69 < _size65; ++_i69)
            {
              xfer += this->dictwords[_i69].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.dictwords = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->customdict.read(iprot);
          this->__isset.customdict = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sysdict.read(iprot);
          this->__isset.sysdict = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->botsysdict.read(iprot);
          this->__isset.botsysdict = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dictword.read(iprot);
          this->__isset.dictword = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->dictpattern.read(iprot);
          this->__isset.dictpattern = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->patterncheck.read(iprot);
          this->__isset.patterncheck = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->patternchecks.clear();
            uint32_t _size70;
            ::apache::thrift::protocol::TType _etype73;
            xfer += iprot->readListBegin(_etype73, _size70);
            this->patternchecks.resize(_size70);
            uint32_t _i74;
            for (_i74 = 0; _i74 < _size70; ++_i74)
            {
              xfer += this->patternchecks[_i74].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.patternchecks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->intents.clear();
            uint32_t _size75;
            ::apache::thrift::protocol::TType _etype78;
            xfer += iprot->readListBegin(_etype78, _size75);
            this->intents.resize(_size75);
            uint32_t _i79;
            for (_i79 = 0; _i79 < _size75; ++_i79)
            {
              xfer += this->intents[_i79].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.intents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->slots.clear();
            uint32_t _size80;
            ::apache::thrift::protocol::TType _etype83;
            xfer += iprot->readListBegin(_etype83, _size80);
            this->slots.resize(_size80);
            uint32_t _i84;
            for (_i84 = 0; _i84 < _size80; ++_i84)
            {
              xfer += this->slots[_i84].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.slots = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->utters.clear();
            uint32_t _size85;
            ::apache::thrift::protocol::TType _etype88;
            xfer += iprot->readListBegin(_etype88, _size85);
            this->utters.resize(_size85);
            uint32_t _i89;
            for (_i89 = 0; _i89 < _size85; ++_i89)
            {
              xfer += this->utters[_i89].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.utters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->intent.read(iprot);
          this->__isset.intent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->slot.read(iprot);
          this->__isset.slot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->utter.read(iprot);
          this->__isset.utter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->devvers.clear();
            uint32_t _size90;
            ::apache::thrift::protocol::TType _etype93;
            xfer += iprot->readListBegin(_etype93, _size90);
            this->devvers.resize(_size90);
            uint32_t _i94;
            for (_i94 = 0; _i94 < _size90; ++_i94)
            {
              xfer += this->devvers[_i94].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.devvers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->provers.clear();
            uint32_t _size95;
            ::apache::thrift::protocol::TType _etype98;
            xfer += iprot->readListBegin(_etype98, _size95);
            this->provers.resize(_size95);
            uint32_t _i99;
            for (_i99 = 0; _i99 < _size95; ++_i99)
            {
              xfer += this->provers[_i99].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.provers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->devver.read(iprot);
          this->__isset.devver = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->prover.read(iprot);
          this->__isset.prover = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sessions.clear();
            uint32_t _size100;
            ::apache::thrift::protocol::TType _etype103;
            xfer += iprot->readListBegin(_etype103, _size100);
            this->sessions.resize(_size100);
            uint32_t _i104;
            for (_i104 = 0; _i104 < _size100; ++_i104)
            {
              xfer += this->sessions[_i104].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sessions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->messages.clear();
            uint32_t _size105;
            ::apache::thrift::protocol::TType _etype108;
            xfer += iprot->readListBegin(_etype108, _size105);
            this->messages.resize(_size105);
            uint32_t _i109;
            for (_i109 = 0; _i109 < _size105; ++_i109)
            {
              xfer += this->messages[_i109].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.messages = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->session.read(iprot);
          this->__isset.session = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->message.read(iprot);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->currpage);
          this->__isset.currpage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalpage);
          this->__isset.totalpage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalrows);
          this->__isset.totalrows = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pagesize);
          this->__isset.pagesize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->page);
          this->__isset.page = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->query);
          this->__isset.query = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Data::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Data");

  if (this->__isset.rc) {
    xfer += oprot->writeFieldBegin("rc", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->rc);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.error) {
    xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->error);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.msg) {
    xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->msg);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.id) {
    xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.chatbotID) {
    xfer += oprot->writeFieldBegin("chatbotID", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->chatbotID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.customdicts) {
    xfer += oprot->writeFieldBegin("customdicts", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->customdicts.size()));
      std::vector<CustomDict> ::const_iterator _iter110;
      for (_iter110 = this->customdicts.begin(); _iter110 != this->customdicts.end(); ++_iter110)
      {
        xfer += (*_iter110).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sysdicts) {
    xfer += oprot->writeFieldBegin("sysdicts", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sysdicts.size()));
      std::vector<SysDict> ::const_iterator _iter111;
      for (_iter111 = this->sysdicts.begin(); _iter111 != this->sysdicts.end(); ++_iter111)
      {
        xfer += (*_iter111).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.botsysdicts) {
    xfer += oprot->writeFieldBegin("botsysdicts", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->botsysdicts.size()));
      std::vector<BotSysdict> ::const_iterator _iter112;
      for (_iter112 = this->botsysdicts.begin(); _iter112 != this->botsysdicts.end(); ++_iter112)
      {
        xfer += (*_iter112).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dictwords) {
    xfer += oprot->writeFieldBegin("dictwords", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->dictwords.size()));
      std::vector<DictWord> ::const_iterator _iter113;
      for (_iter113 = this->dictwords.begin(); _iter113 != this->dictwords.end(); ++_iter113)
      {
        xfer += (*_iter113).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.customdict) {
    xfer += oprot->writeFieldBegin("customdict", ::apache::thrift::protocol::T_STRUCT, 10);
    xfer += this->customdict.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sysdict) {
    xfer += oprot->writeFieldBegin("sysdict", ::apache::thrift::protocol::T_STRUCT, 11);
    xfer += this->sysdict.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.botsysdict) {
    xfer += oprot->writeFieldBegin("botsysdict", ::apache::thrift::protocol::T_STRUCT, 12);
    xfer += this->botsysdict.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dictword) {
    xfer += oprot->writeFieldBegin("dictword", ::apache::thrift::protocol::T_STRUCT, 13);
    xfer += this->dictword.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dictpattern) {
    xfer += oprot->writeFieldBegin("dictpattern", ::apache::thrift::protocol::T_STRUCT, 14);
    xfer += this->dictpattern.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.patterncheck) {
    xfer += oprot->writeFieldBegin("patterncheck", ::apache::thrift::protocol::T_STRUCT, 15);
    xfer += this->patterncheck.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.patternchecks) {
    xfer += oprot->writeFieldBegin("patternchecks", ::apache::thrift::protocol::T_LIST, 16);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->patternchecks.size()));
      std::vector<DictPatternCheck> ::const_iterator _iter114;
      for (_iter114 = this->patternchecks.begin(); _iter114 != this->patternchecks.end(); ++_iter114)
      {
        xfer += (*_iter114).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.intents) {
    xfer += oprot->writeFieldBegin("intents", ::apache::thrift::protocol::T_LIST, 17);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->intents.size()));
      std::vector<Intent> ::const_iterator _iter115;
      for (_iter115 = this->intents.begin(); _iter115 != this->intents.end(); ++_iter115)
      {
        xfer += (*_iter115).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.slots) {
    xfer += oprot->writeFieldBegin("slots", ::apache::thrift::protocol::T_LIST, 18);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->slots.size()));
      std::vector<IntentSlot> ::const_iterator _iter116;
      for (_iter116 = this->slots.begin(); _iter116 != this->slots.end(); ++_iter116)
      {
        xfer += (*_iter116).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.utters) {
    xfer += oprot->writeFieldBegin("utters", ::apache::thrift::protocol::T_LIST, 19);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->utters.size()));
      std::vector<IntentUtter> ::const_iterator _iter117;
      for (_iter117 = this->utters.begin(); _iter117 != this->utters.end(); ++_iter117)
      {
        xfer += (*_iter117).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.intent) {
    xfer += oprot->writeFieldBegin("intent", ::apache::thrift::protocol::T_STRUCT, 20);
    xfer += this->intent.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.slot) {
    xfer += oprot->writeFieldBegin("slot", ::apache::thrift::protocol::T_STRUCT, 21);
    xfer += this->slot.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.utter) {
    xfer += oprot->writeFieldBegin("utter", ::apache::thrift::protocol::T_STRUCT, 22);
    xfer += this->utter.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.devvers) {
    xfer += oprot->writeFieldBegin("devvers", ::apache::thrift::protocol::T_LIST, 23);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->devvers.size()));
      std::vector<DevelopVersion> ::const_iterator _iter118;
      for (_iter118 = this->devvers.begin(); _iter118 != this->devvers.end(); ++_iter118)
      {
        xfer += (*_iter118).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.provers) {
    xfer += oprot->writeFieldBegin("provers", ::apache::thrift::protocol::T_LIST, 24);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->provers.size()));
      std::vector<ProdVersion> ::const_iterator _iter119;
      for (_iter119 = this->provers.begin(); _iter119 != this->provers.end(); ++_iter119)
      {
        xfer += (*_iter119).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.devver) {
    xfer += oprot->writeFieldBegin("devver", ::apache::thrift::protocol::T_STRUCT, 25);
    xfer += this->devver.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.prover) {
    xfer += oprot->writeFieldBegin("prover", ::apache::thrift::protocol::T_STRUCT, 26);
    xfer += this->prover.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sessions) {
    xfer += oprot->writeFieldBegin("sessions", ::apache::thrift::protocol::T_LIST, 27);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sessions.size()));
      std::vector<ChatSession> ::const_iterator _iter120;
      for (_iter120 = this->sessions.begin(); _iter120 != this->sessions.end(); ++_iter120)
      {
        xfer += (*_iter120).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.messages) {
    xfer += oprot->writeFieldBegin("messages", ::apache::thrift::protocol::T_LIST, 28);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->messages.size()));
      std::vector<ChatMessage> ::const_iterator _iter121;
      for (_iter121 = this->messages.begin(); _iter121 != this->messages.end(); ++_iter121)
      {
        xfer += (*_iter121).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.session) {
    xfer += oprot->writeFieldBegin("session", ::apache::thrift::protocol::T_STRUCT, 29);
    xfer += this->session.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRUCT, 30);
    xfer += this->message.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.currpage) {
    xfer += oprot->writeFieldBegin("currpage", ::apache::thrift::protocol::T_I32, 31);
    xfer += oprot->writeI32(this->currpage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.totalpage) {
    xfer += oprot->writeFieldBegin("totalpage", ::apache::thrift::protocol::T_I32, 32);
    xfer += oprot->writeI32(this->totalpage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.totalrows) {
    xfer += oprot->writeFieldBegin("totalrows", ::apache::thrift::protocol::T_I32, 33);
    xfer += oprot->writeI32(this->totalrows);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pagesize) {
    xfer += oprot->writeFieldBegin("pagesize", ::apache::thrift::protocol::T_I32, 34);
    xfer += oprot->writeI32(this->pagesize);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.page) {
    xfer += oprot->writeFieldBegin("page", ::apache::thrift::protocol::T_I32, 35);
    xfer += oprot->writeI32(this->page);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.query) {
    xfer += oprot->writeFieldBegin("query", ::apache::thrift::protocol::T_STRING, 36);
    xfer += oprot->writeString(this->query);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Data &a, Data &b) {
  using ::std::swap;
  swap(a.rc, b.rc);
  swap(a.error, b.error);
  swap(a.msg, b.msg);
  swap(a.id, b.id);
  swap(a.chatbotID, b.chatbotID);
  swap(a.customdicts, b.customdicts);
  swap(a.sysdicts, b.sysdicts);
  swap(a.botsysdicts, b.botsysdicts);
  swap(a.dictwords, b.dictwords);
  swap(a.customdict, b.customdict);
  swap(a.sysdict, b.sysdict);
  swap(a.botsysdict, b.botsysdict);
  swap(a.dictword, b.dictword);
  swap(a.dictpattern, b.dictpattern);
  swap(a.patterncheck, b.patterncheck);
  swap(a.patternchecks, b.patternchecks);
  swap(a.intents, b.intents);
  swap(a.slots, b.slots);
  swap(a.utters, b.utters);
  swap(a.intent, b.intent);
  swap(a.slot, b.slot);
  swap(a.utter, b.utter);
  swap(a.devvers, b.devvers);
  swap(a.provers, b.provers);
  swap(a.devver, b.devver);
  swap(a.prover, b.prover);
  swap(a.sessions, b.sessions);
  swap(a.messages, b.messages);
  swap(a.session, b.session);
  swap(a.message, b.message);
  swap(a.currpage, b.currpage);
  swap(a.totalpage, b.totalpage);
  swap(a.totalrows, b.totalrows);
  swap(a.pagesize, b.pagesize);
  swap(a.page, b.page);
  swap(a.query, b.query);
  swap(a.__isset, b.__isset);
}

Data::Data(const Data& other122) {
  rc = other122.rc;
  error = other122.error;
  msg = other122.msg;
  id = other122.id;
  chatbotID = other122.chatbotID;
  customdicts = other122.customdicts;
  sysdicts = other122.sysdicts;
  botsysdicts = other122.botsysdicts;
  dictwords = other122.dictwords;
  customdict = other122.customdict;
  sysdict = other122.sysdict;
  botsysdict = other122.botsysdict;
  dictword = other122.dictword;
  dictpattern = other122.dictpattern;
  patterncheck = other122.patterncheck;
  patternchecks = other122.patternchecks;
  intents = other122.intents;
  slots = other122.slots;
  utters = other122.utters;
  intent = other122.intent;
  slot = other122.slot;
  utter = other122.utter;
  devvers = other122.devvers;
  provers = other122.provers;
  devver = other122.devver;
  prover = other122.prover;
  sessions = other122.sessions;
  messages = other122.messages;
  session = other122.session;
  message = other122.message;
  currpage = other122.currpage;
  totalpage = other122.totalpage;
  totalrows = other122.totalrows;
  pagesize = other122.pagesize;
  page = other122.page;
  query = other122.query;
  __isset = other122.__isset;
}
Data& Data::operator=(const Data& other123) {
  rc = other123.rc;
  error = other123.error;
  msg = other123.msg;
  id = other123.id;
  chatbotID = other123.chatbotID;
  customdicts = other123.customdicts;
  sysdicts = other123.sysdicts;
  botsysdicts = other123.botsysdicts;
  dictwords = other123.dictwords;
  customdict = other123.customdict;
  sysdict = other123.sysdict;
  botsysdict = other123.botsysdict;
  dictword = other123.dictword;
  dictpattern = other123.dictpattern;
  patterncheck = other123.patterncheck;
  patternchecks = other123.patternchecks;
  intents = other123.intents;
  slots = other123.slots;
  utters = other123.utters;
  intent = other123.intent;
  slot = other123.slot;
  utter = other123.utter;
  devvers = other123.devvers;
  provers = other123.provers;
  devver = other123.devver;
  prover = other123.prover;
  sessions = other123.sessions;
  messages = other123.messages;
  session = other123.session;
  message = other123.message;
  currpage = other123.currpage;
  totalpage = other123.totalpage;
  totalrows = other123.totalrows;
  pagesize = other123.pagesize;
  page = other123.page;
  query = other123.query;
  __isset = other123.__isset;
  return *this;
}
void Data::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Data(";
  out << "rc="; (__isset.rc ? (out << to_string(rc)) : (out << "<null>"));
  out << ", " << "error="; (__isset.error ? (out << to_string(error)) : (out << "<null>"));
  out << ", " << "msg="; (__isset.msg ? (out << to_string(msg)) : (out << "<null>"));
  out << ", " << "id="; (__isset.id ? (out << to_string(id)) : (out << "<null>"));
  out << ", " << "chatbotID="; (__isset.chatbotID ? (out << to_string(chatbotID)) : (out << "<null>"));
  out << ", " << "customdicts="; (__isset.customdicts ? (out << to_string(customdicts)) : (out << "<null>"));
  out << ", " << "sysdicts="; (__isset.sysdicts ? (out << to_string(sysdicts)) : (out << "<null>"));
  out << ", " << "botsysdicts="; (__isset.botsysdicts ? (out << to_string(botsysdicts)) : (out << "<null>"));
  out << ", " << "dictwords="; (__isset.dictwords ? (out << to_string(dictwords)) : (out << "<null>"));
  out << ", " << "customdict="; (__isset.customdict ? (out << to_string(customdict)) : (out << "<null>"));
  out << ", " << "sysdict="; (__isset.sysdict ? (out << to_string(sysdict)) : (out << "<null>"));
  out << ", " << "botsysdict="; (__isset.botsysdict ? (out << to_string(botsysdict)) : (out << "<null>"));
  out << ", " << "dictword="; (__isset.dictword ? (out << to_string(dictword)) : (out << "<null>"));
  out << ", " << "dictpattern="; (__isset.dictpattern ? (out << to_string(dictpattern)) : (out << "<null>"));
  out << ", " << "patterncheck="; (__isset.patterncheck ? (out << to_string(patterncheck)) : (out << "<null>"));
  out << ", " << "patternchecks="; (__isset.patternchecks ? (out << to_string(patternchecks)) : (out << "<null>"));
  out << ", " << "intents="; (__isset.intents ? (out << to_string(intents)) : (out << "<null>"));
  out << ", " << "slots="; (__isset.slots ? (out << to_string(slots)) : (out << "<null>"));
  out << ", " << "utters="; (__isset.utters ? (out << to_string(utters)) : (out << "<null>"));
  out << ", " << "intent="; (__isset.intent ? (out << to_string(intent)) : (out << "<null>"));
  out << ", " << "slot="; (__isset.slot ? (out << to_string(slot)) : (out << "<null>"));
  out << ", " << "utter="; (__isset.utter ? (out << to_string(utter)) : (out << "<null>"));
  out << ", " << "devvers="; (__isset.devvers ? (out << to_string(devvers)) : (out << "<null>"));
  out << ", " << "provers="; (__isset.provers ? (out << to_string(provers)) : (out << "<null>"));
  out << ", " << "devver="; (__isset.devver ? (out << to_string(devver)) : (out << "<null>"));
  out << ", " << "prover="; (__isset.prover ? (out << to_string(prover)) : (out << "<null>"));
  out << ", " << "sessions="; (__isset.sessions ? (out << to_string(sessions)) : (out << "<null>"));
  out << ", " << "messages="; (__isset.messages ? (out << to_string(messages)) : (out << "<null>"));
  out << ", " << "session="; (__isset.session ? (out << to_string(session)) : (out << "<null>"));
  out << ", " << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ", " << "currpage="; (__isset.currpage ? (out << to_string(currpage)) : (out << "<null>"));
  out << ", " << "totalpage="; (__isset.totalpage ? (out << to_string(totalpage)) : (out << "<null>"));
  out << ", " << "totalrows="; (__isset.totalrows ? (out << to_string(totalrows)) : (out << "<null>"));
  out << ", " << "pagesize="; (__isset.pagesize ? (out << to_string(pagesize)) : (out << "<null>"));
  out << ", " << "page="; (__isset.page ? (out << to_string(page)) : (out << "<null>"));
  out << ", " << "query="; (__isset.query ? (out << to_string(query)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
