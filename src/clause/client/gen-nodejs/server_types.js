//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var BotSysdict = module.exports.BotSysdict = function(args) {
  this.chatbotID = null;
  this.dict_id = null;
  this.id = null;
  this.createdate = null;
  if (args) {
    if (args.chatbotID !== undefined && args.chatbotID !== null) {
      this.chatbotID = args.chatbotID;
    }
    if (args.dict_id !== undefined && args.dict_id !== null) {
      this.dict_id = args.dict_id;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createdate !== undefined && args.createdate !== null) {
      this.createdate = args.createdate;
    }
  }
};
BotSysdict.prototype = {};
BotSysdict.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.chatbotID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dict_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.createdate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BotSysdict.prototype.write = function(output) {
  output.writeStructBegin('BotSysdict');
  if (this.chatbotID !== null && this.chatbotID !== undefined) {
    output.writeFieldBegin('chatbotID', Thrift.Type.STRING, 1);
    output.writeString(this.chatbotID);
    output.writeFieldEnd();
  }
  if (this.dict_id !== null && this.dict_id !== undefined) {
    output.writeFieldBegin('dict_id', Thrift.Type.STRING, 2);
    output.writeString(this.dict_id);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 3);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createdate !== null && this.createdate !== undefined) {
    output.writeFieldBegin('createdate', Thrift.Type.STRING, 4);
    output.writeString(this.createdate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChatMessage = module.exports.ChatMessage = function(args) {
  this.session_id = null;
  this.chatbotID = null;
  this.type = null;
  this.direction = null;
  this.branch = null;
  this.sender = null;
  this.receiver = null;
  this.createdate = null;
  this.id = null;
  this.textMessage = null;
  this.audioMessage = null;
  this.videoMessage = null;
  this.imageMessage = null;
  this.terms = null;
  this.tags = null;
  this.is_fallback = null;
  this.is_proactive = null;
  if (args) {
    if (args.session_id !== undefined && args.session_id !== null) {
      this.session_id = args.session_id;
    }
    if (args.chatbotID !== undefined && args.chatbotID !== null) {
      this.chatbotID = args.chatbotID;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    }
    if (args.branch !== undefined && args.branch !== null) {
      this.branch = args.branch;
    }
    if (args.sender !== undefined && args.sender !== null) {
      this.sender = args.sender;
    }
    if (args.receiver !== undefined && args.receiver !== null) {
      this.receiver = args.receiver;
    }
    if (args.createdate !== undefined && args.createdate !== null) {
      this.createdate = args.createdate;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.textMessage !== undefined && args.textMessage !== null) {
      this.textMessage = args.textMessage;
    }
    if (args.audioMessage !== undefined && args.audioMessage !== null) {
      this.audioMessage = args.audioMessage;
    }
    if (args.videoMessage !== undefined && args.videoMessage !== null) {
      this.videoMessage = args.videoMessage;
    }
    if (args.imageMessage !== undefined && args.imageMessage !== null) {
      this.imageMessage = args.imageMessage;
    }
    if (args.terms !== undefined && args.terms !== null) {
      this.terms = Thrift.copyList(args.terms, [null]);
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [null]);
    }
    if (args.is_fallback !== undefined && args.is_fallback !== null) {
      this.is_fallback = args.is_fallback;
    }
    if (args.is_proactive !== undefined && args.is_proactive !== null) {
      this.is_proactive = args.is_proactive;
    }
  }
};
ChatMessage.prototype = {};
ChatMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatbotID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.direction = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.branch = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.sender = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.receiver = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.createdate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.textMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.audioMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.videoMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.imageMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        this.terms = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString();
          this.terms.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        this.tags = [];
        var _rtmp35 = input.readListBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          var elem7 = null;
          elem7 = input.readString();
          this.tags.push(elem7);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.BOOL) {
        this.is_fallback = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.BOOL) {
        this.is_proactive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChatMessage.prototype.write = function(output) {
  output.writeStructBegin('ChatMessage');
  if (this.session_id !== null && this.session_id !== undefined) {
    output.writeFieldBegin('session_id', Thrift.Type.STRING, 1);
    output.writeString(this.session_id);
    output.writeFieldEnd();
  }
  if (this.chatbotID !== null && this.chatbotID !== undefined) {
    output.writeFieldBegin('chatbotID', Thrift.Type.STRING, 2);
    output.writeString(this.chatbotID);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.I32, 4);
    output.writeI32(this.direction);
    output.writeFieldEnd();
  }
  if (this.branch !== null && this.branch !== undefined) {
    output.writeFieldBegin('branch', Thrift.Type.I32, 5);
    output.writeI32(this.branch);
    output.writeFieldEnd();
  }
  if (this.sender !== null && this.sender !== undefined) {
    output.writeFieldBegin('sender', Thrift.Type.STRING, 6);
    output.writeString(this.sender);
    output.writeFieldEnd();
  }
  if (this.receiver !== null && this.receiver !== undefined) {
    output.writeFieldBegin('receiver', Thrift.Type.STRING, 7);
    output.writeString(this.receiver);
    output.writeFieldEnd();
  }
  if (this.createdate !== null && this.createdate !== undefined) {
    output.writeFieldBegin('createdate', Thrift.Type.STRING, 8);
    output.writeString(this.createdate);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 9);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.textMessage !== null && this.textMessage !== undefined) {
    output.writeFieldBegin('textMessage', Thrift.Type.STRING, 10);
    output.writeString(this.textMessage);
    output.writeFieldEnd();
  }
  if (this.audioMessage !== null && this.audioMessage !== undefined) {
    output.writeFieldBegin('audioMessage', Thrift.Type.STRING, 11);
    output.writeString(this.audioMessage);
    output.writeFieldEnd();
  }
  if (this.videoMessage !== null && this.videoMessage !== undefined) {
    output.writeFieldBegin('videoMessage', Thrift.Type.STRING, 12);
    output.writeString(this.videoMessage);
    output.writeFieldEnd();
  }
  if (this.imageMessage !== null && this.imageMessage !== undefined) {
    output.writeFieldBegin('imageMessage', Thrift.Type.STRING, 13);
    output.writeString(this.imageMessage);
    output.writeFieldEnd();
  }
  if (this.terms !== null && this.terms !== undefined) {
    output.writeFieldBegin('terms', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRING, this.terms.length);
    for (var iter8 in this.terms) {
      if (this.terms.hasOwnProperty(iter8)) {
        iter8 = this.terms[iter8];
        output.writeString(iter8);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRING, this.tags.length);
    for (var iter9 in this.tags) {
      if (this.tags.hasOwnProperty(iter9)) {
        iter9 = this.tags[iter9];
        output.writeString(iter9);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.is_fallback !== null && this.is_fallback !== undefined) {
    output.writeFieldBegin('is_fallback', Thrift.Type.BOOL, 16);
    output.writeBool(this.is_fallback);
    output.writeFieldEnd();
  }
  if (this.is_proactive !== null && this.is_proactive !== undefined) {
    output.writeFieldBegin('is_proactive', Thrift.Type.BOOL, 17);
    output.writeBool(this.is_proactive);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Entity = module.exports.Entity = function(args) {
  this.name = null;
  this.val = null;
  this.requires = null;
  this.dictname = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.val !== undefined && args.val !== null) {
      this.val = args.val;
    }
    if (args.requires !== undefined && args.requires !== null) {
      this.requires = args.requires;
    }
    if (args.dictname !== undefined && args.dictname !== null) {
      this.dictname = args.dictname;
    }
  }
};
Entity.prototype = {};
Entity.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.val = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.requires = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dictname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Entity.prototype.write = function(output) {
  output.writeStructBegin('Entity');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.val !== null && this.val !== undefined) {
    output.writeFieldBegin('val', Thrift.Type.STRING, 2);
    output.writeString(this.val);
    output.writeFieldEnd();
  }
  if (this.requires !== null && this.requires !== undefined) {
    output.writeFieldBegin('requires', Thrift.Type.BOOL, 3);
    output.writeBool(this.requires);
    output.writeFieldEnd();
  }
  if (this.dictname !== null && this.dictname !== undefined) {
    output.writeFieldBegin('dictname', Thrift.Type.STRING, 4);
    output.writeString(this.dictname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ChatSession = module.exports.ChatSession = function(args) {
  this.intent_name = null;
  this.chatbotID = null;
  this.uid = null;
  this.channel = null;
  this.resolved = null;
  this.id = null;
  this.entities = null;
  this.branch = null;
  this.createdate = null;
  this.updatedate = null;
  if (args) {
    if (args.intent_name !== undefined && args.intent_name !== null) {
      this.intent_name = args.intent_name;
    }
    if (args.chatbotID !== undefined && args.chatbotID !== null) {
      this.chatbotID = args.chatbotID;
    }
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.channel !== undefined && args.channel !== null) {
      this.channel = args.channel;
    }
    if (args.resolved !== undefined && args.resolved !== null) {
      this.resolved = args.resolved;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.entities !== undefined && args.entities !== null) {
      this.entities = Thrift.copyList(args.entities, [ttypes.Entity]);
    }
    if (args.branch !== undefined && args.branch !== null) {
      this.branch = args.branch;
    }
    if (args.createdate !== undefined && args.createdate !== null) {
      this.createdate = args.createdate;
    }
    if (args.updatedate !== undefined && args.updatedate !== null) {
      this.updatedate = args.updatedate;
    }
  }
};
ChatSession.prototype = {};
ChatSession.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.intent_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatbotID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.channel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.resolved = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        this.entities = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = new ttypes.Entity();
          elem13.read(input);
          this.entities.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.branch = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.createdate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.updatedate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChatSession.prototype.write = function(output) {
  output.writeStructBegin('ChatSession');
  if (this.intent_name !== null && this.intent_name !== undefined) {
    output.writeFieldBegin('intent_name', Thrift.Type.STRING, 1);
    output.writeString(this.intent_name);
    output.writeFieldEnd();
  }
  if (this.chatbotID !== null && this.chatbotID !== undefined) {
    output.writeFieldBegin('chatbotID', Thrift.Type.STRING, 2);
    output.writeString(this.chatbotID);
    output.writeFieldEnd();
  }
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 3);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.STRING, 4);
    output.writeString(this.channel);
    output.writeFieldEnd();
  }
  if (this.resolved !== null && this.resolved !== undefined) {
    output.writeFieldBegin('resolved', Thrift.Type.BOOL, 5);
    output.writeBool(this.resolved);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 6);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.entities !== null && this.entities !== undefined) {
    output.writeFieldBegin('entities', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.entities.length);
    for (var iter14 in this.entities) {
      if (this.entities.hasOwnProperty(iter14)) {
        iter14 = this.entities[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.branch !== null && this.branch !== undefined) {
    output.writeFieldBegin('branch', Thrift.Type.STRING, 8);
    output.writeString(this.branch);
    output.writeFieldEnd();
  }
  if (this.createdate !== null && this.createdate !== undefined) {
    output.writeFieldBegin('createdate', Thrift.Type.STRING, 9);
    output.writeString(this.createdate);
    output.writeFieldEnd();
  }
  if (this.updatedate !== null && this.updatedate !== undefined) {
    output.writeFieldBegin('updatedate', Thrift.Type.STRING, 10);
    output.writeString(this.updatedate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DictWord = module.exports.DictWord = function(args) {
  this.word = null;
  this.dict_id = null;
  this.synonyms = null;
  this.tag = null;
  this.lang = null;
  this.createdate = null;
  this.updatedate = null;
  if (args) {
    if (args.word !== undefined && args.word !== null) {
      this.word = args.word;
    }
    if (args.dict_id !== undefined && args.dict_id !== null) {
      this.dict_id = args.dict_id;
    }
    if (args.synonyms !== undefined && args.synonyms !== null) {
      this.synonyms = args.synonyms;
    }
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = args.tag;
    }
    if (args.lang !== undefined && args.lang !== null) {
      this.lang = args.lang;
    }
    if (args.createdate !== undefined && args.createdate !== null) {
      this.createdate = args.createdate;
    }
    if (args.updatedate !== undefined && args.updatedate !== null) {
      this.updatedate = args.updatedate;
    }
  }
};
DictWord.prototype = {};
DictWord.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.word = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dict_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.synonyms = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.lang = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.createdate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.updatedate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictWord.prototype.write = function(output) {
  output.writeStructBegin('DictWord');
  if (this.word !== null && this.word !== undefined) {
    output.writeFieldBegin('word', Thrift.Type.STRING, 1);
    output.writeString(this.word);
    output.writeFieldEnd();
  }
  if (this.dict_id !== null && this.dict_id !== undefined) {
    output.writeFieldBegin('dict_id', Thrift.Type.STRING, 2);
    output.writeString(this.dict_id);
    output.writeFieldEnd();
  }
  if (this.synonyms !== null && this.synonyms !== undefined) {
    output.writeFieldBegin('synonyms', Thrift.Type.STRING, 3);
    output.writeString(this.synonyms);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 4);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  if (this.lang !== null && this.lang !== undefined) {
    output.writeFieldBegin('lang', Thrift.Type.STRING, 5);
    output.writeString(this.lang);
    output.writeFieldEnd();
  }
  if (this.createdate !== null && this.createdate !== undefined) {
    output.writeFieldBegin('createdate', Thrift.Type.STRING, 6);
    output.writeString(this.createdate);
    output.writeFieldEnd();
  }
  if (this.updatedate !== null && this.updatedate !== undefined) {
    output.writeFieldBegin('updatedate', Thrift.Type.STRING, 7);
    output.writeString(this.updatedate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DictPattern = module.exports.DictPattern = function(args) {
  this.id = null;
  this.dict_id = null;
  this.patterns = null;
  this.standard = null;
  this.createdate = null;
  this.updatedate = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.dict_id !== undefined && args.dict_id !== null) {
      this.dict_id = args.dict_id;
    }
    if (args.patterns !== undefined && args.patterns !== null) {
      this.patterns = Thrift.copyList(args.patterns, [null]);
    }
    if (args.standard !== undefined && args.standard !== null) {
      this.standard = args.standard;
    }
    if (args.createdate !== undefined && args.createdate !== null) {
      this.createdate = args.createdate;
    }
    if (args.updatedate !== undefined && args.updatedate !== null) {
      this.updatedate = args.updatedate;
    }
  }
};
DictPattern.prototype = {};
DictPattern.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dict_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.patterns = [];
        var _rtmp316 = input.readListBegin();
        var _size15 = _rtmp316.size || 0;
        for (var _i17 = 0; _i17 < _size15; ++_i17) {
          var elem18 = null;
          elem18 = input.readString();
          this.patterns.push(elem18);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.standard = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.createdate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.updatedate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictPattern.prototype.write = function(output) {
  output.writeStructBegin('DictPattern');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.dict_id !== null && this.dict_id !== undefined) {
    output.writeFieldBegin('dict_id', Thrift.Type.STRING, 2);
    output.writeString(this.dict_id);
    output.writeFieldEnd();
  }
  if (this.patterns !== null && this.patterns !== undefined) {
    output.writeFieldBegin('patterns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.patterns.length);
    for (var iter19 in this.patterns) {
      if (this.patterns.hasOwnProperty(iter19)) {
        iter19 = this.patterns[iter19];
        output.writeString(iter19);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.standard !== null && this.standard !== undefined) {
    output.writeFieldBegin('standard', Thrift.Type.STRING, 4);
    output.writeString(this.standard);
    output.writeFieldEnd();
  }
  if (this.createdate !== null && this.createdate !== undefined) {
    output.writeFieldBegin('createdate', Thrift.Type.STRING, 5);
    output.writeString(this.createdate);
    output.writeFieldEnd();
  }
  if (this.updatedate !== null && this.updatedate !== undefined) {
    output.writeFieldBegin('updatedate', Thrift.Type.STRING, 6);
    output.writeString(this.updatedate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DictPatternCheck = module.exports.DictPatternCheck = function(args) {
  this.id = null;
  this.dict_id = null;
  this.input = null;
  this.output = null;
  this.createdate = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.dict_id !== undefined && args.dict_id !== null) {
      this.dict_id = args.dict_id;
    }
    if (args.input !== undefined && args.input !== null) {
      this.input = args.input;
    }
    if (args.output !== undefined && args.output !== null) {
      this.output = args.output;
    }
    if (args.createdate !== undefined && args.createdate !== null) {
      this.createdate = args.createdate;
    }
  }
};
DictPatternCheck.prototype = {};
DictPatternCheck.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dict_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.input = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.output = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.createdate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DictPatternCheck.prototype.write = function(output) {
  output.writeStructBegin('DictPatternCheck');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.dict_id !== null && this.dict_id !== undefined) {
    output.writeFieldBegin('dict_id', Thrift.Type.STRING, 2);
    output.writeString(this.dict_id);
    output.writeFieldEnd();
  }
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.STRING, 3);
    output.writeString(this.input);
    output.writeFieldEnd();
  }
  if (this.output !== null && this.output !== undefined) {
    output.writeFieldBegin('output', Thrift.Type.STRING, 4);
    output.writeString(this.output);
    output.writeFieldEnd();
  }
  if (this.createdate !== null && this.createdate !== undefined) {
    output.writeFieldBegin('createdate', Thrift.Type.STRING, 5);
    output.writeString(this.createdate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Dict = module.exports.Dict = function(args) {
  this.name = null;
  this.chatbotID = null;
  this.builtin = null;
  this.active = null;
  this.id = null;
  this.description = null;
  this.samples = null;
  this.createdate = null;
  this.updatedate = null;
  this.referred = null;
  this.type = null;
  this.vendor = null;
  this.used = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.chatbotID !== undefined && args.chatbotID !== null) {
      this.chatbotID = args.chatbotID;
    }
    if (args.builtin !== undefined && args.builtin !== null) {
      this.builtin = args.builtin;
    }
    if (args.active !== undefined && args.active !== null) {
      this.active = args.active;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.samples !== undefined && args.samples !== null) {
      this.samples = args.samples;
    }
    if (args.createdate !== undefined && args.createdate !== null) {
      this.createdate = args.createdate;
    }
    if (args.updatedate !== undefined && args.updatedate !== null) {
      this.updatedate = args.updatedate;
    }
    if (args.referred !== undefined && args.referred !== null) {
      this.referred = args.referred;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.vendor !== undefined && args.vendor !== null) {
      this.vendor = args.vendor;
    }
    if (args.used !== undefined && args.used !== null) {
      this.used = args.used;
    }
  }
};
Dict.prototype = {};
Dict.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.chatbotID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.builtin = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.samples = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.createdate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.updatedate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.referred = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.vendor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.used = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Dict.prototype.write = function(output) {
  output.writeStructBegin('Dict');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.chatbotID !== null && this.chatbotID !== undefined) {
    output.writeFieldBegin('chatbotID', Thrift.Type.STRING, 2);
    output.writeString(this.chatbotID);
    output.writeFieldEnd();
  }
  if (this.builtin !== null && this.builtin !== undefined) {
    output.writeFieldBegin('builtin', Thrift.Type.BOOL, 3);
    output.writeBool(this.builtin);
    output.writeFieldEnd();
  }
  if (this.active !== null && this.active !== undefined) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 4);
    output.writeBool(this.active);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 5);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 6);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.samples !== null && this.samples !== undefined) {
    output.writeFieldBegin('samples', Thrift.Type.STRING, 7);
    output.writeString(this.samples);
    output.writeFieldEnd();
  }
  if (this.createdate !== null && this.createdate !== undefined) {
    output.writeFieldBegin('createdate', Thrift.Type.STRING, 8);
    output.writeString(this.createdate);
    output.writeFieldEnd();
  }
  if (this.updatedate !== null && this.updatedate !== undefined) {
    output.writeFieldBegin('updatedate', Thrift.Type.STRING, 9);
    output.writeString(this.updatedate);
    output.writeFieldEnd();
  }
  if (this.referred !== null && this.referred !== undefined) {
    output.writeFieldBegin('referred', Thrift.Type.BOOL, 10);
    output.writeBool(this.referred);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 11);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.vendor !== null && this.vendor !== undefined) {
    output.writeFieldBegin('vendor', Thrift.Type.STRING, 12);
    output.writeString(this.vendor);
    output.writeFieldEnd();
  }
  if (this.used !== null && this.used !== undefined) {
    output.writeFieldBegin('used', Thrift.Type.BOOL, 13);
    output.writeBool(this.used);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Intent = module.exports.Intent = function(args) {
  this.chatbotID = null;
  this.name = null;
  this.id = null;
  this.description = null;
  this.createdate = null;
  this.updatedate = null;
  if (args) {
    if (args.chatbotID !== undefined && args.chatbotID !== null) {
      this.chatbotID = args.chatbotID;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.createdate !== undefined && args.createdate !== null) {
      this.createdate = args.createdate;
    }
    if (args.updatedate !== undefined && args.updatedate !== null) {
      this.updatedate = args.updatedate;
    }
  }
};
Intent.prototype = {};
Intent.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.chatbotID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.createdate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.updatedate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Intent.prototype.write = function(output) {
  output.writeStructBegin('Intent');
  if (this.chatbotID !== null && this.chatbotID !== undefined) {
    output.writeFieldBegin('chatbotID', Thrift.Type.STRING, 1);
    output.writeString(this.chatbotID);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 3);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.createdate !== null && this.createdate !== undefined) {
    output.writeFieldBegin('createdate', Thrift.Type.STRING, 5);
    output.writeString(this.createdate);
    output.writeFieldEnd();
  }
  if (this.updatedate !== null && this.updatedate !== undefined) {
    output.writeFieldBegin('updatedate', Thrift.Type.STRING, 6);
    output.writeString(this.updatedate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IntentSlot = module.exports.IntentSlot = function(args) {
  this.intent_id = null;
  this.name = null;
  this.dict_id = null;
  this.requires = null;
  this.id = null;
  this.createdate = null;
  this.updatedate = null;
  this.question = null;
  this.dict = null;
  if (args) {
    if (args.intent_id !== undefined && args.intent_id !== null) {
      this.intent_id = args.intent_id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.dict_id !== undefined && args.dict_id !== null) {
      this.dict_id = args.dict_id;
    }
    if (args.requires !== undefined && args.requires !== null) {
      this.requires = args.requires;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createdate !== undefined && args.createdate !== null) {
      this.createdate = args.createdate;
    }
    if (args.updatedate !== undefined && args.updatedate !== null) {
      this.updatedate = args.updatedate;
    }
    if (args.question !== undefined && args.question !== null) {
      this.question = args.question;
    }
    if (args.dict !== undefined && args.dict !== null) {
      this.dict = new ttypes.Dict(args.dict);
    }
  }
};
IntentSlot.prototype = {};
IntentSlot.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.intent_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dict_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.requires = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.createdate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.updatedate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.question = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.dict = new ttypes.Dict();
        this.dict.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IntentSlot.prototype.write = function(output) {
  output.writeStructBegin('IntentSlot');
  if (this.intent_id !== null && this.intent_id !== undefined) {
    output.writeFieldBegin('intent_id', Thrift.Type.STRING, 1);
    output.writeString(this.intent_id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.dict_id !== null && this.dict_id !== undefined) {
    output.writeFieldBegin('dict_id', Thrift.Type.STRING, 3);
    output.writeString(this.dict_id);
    output.writeFieldEnd();
  }
  if (this.requires !== null && this.requires !== undefined) {
    output.writeFieldBegin('requires', Thrift.Type.BOOL, 4);
    output.writeBool(this.requires);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 5);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createdate !== null && this.createdate !== undefined) {
    output.writeFieldBegin('createdate', Thrift.Type.STRING, 6);
    output.writeString(this.createdate);
    output.writeFieldEnd();
  }
  if (this.updatedate !== null && this.updatedate !== undefined) {
    output.writeFieldBegin('updatedate', Thrift.Type.STRING, 7);
    output.writeString(this.updatedate);
    output.writeFieldEnd();
  }
  if (this.question !== null && this.question !== undefined) {
    output.writeFieldBegin('question', Thrift.Type.STRING, 8);
    output.writeString(this.question);
    output.writeFieldEnd();
  }
  if (this.dict !== null && this.dict !== undefined) {
    output.writeFieldBegin('dict', Thrift.Type.STRUCT, 9);
    this.dict.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IntentUtter = module.exports.IntentUtter = function(args) {
  this.intent_id = null;
  this.utterance = null;
  this.id = null;
  this.createdate = null;
  this.updatedate = null;
  if (args) {
    if (args.intent_id !== undefined && args.intent_id !== null) {
      this.intent_id = args.intent_id;
    }
    if (args.utterance !== undefined && args.utterance !== null) {
      this.utterance = args.utterance;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createdate !== undefined && args.createdate !== null) {
      this.createdate = args.createdate;
    }
    if (args.updatedate !== undefined && args.updatedate !== null) {
      this.updatedate = args.updatedate;
    }
  }
};
IntentUtter.prototype = {};
IntentUtter.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.intent_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.utterance = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.createdate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.updatedate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IntentUtter.prototype.write = function(output) {
  output.writeStructBegin('IntentUtter');
  if (this.intent_id !== null && this.intent_id !== undefined) {
    output.writeFieldBegin('intent_id', Thrift.Type.STRING, 1);
    output.writeString(this.intent_id);
    output.writeFieldEnd();
  }
  if (this.utterance !== null && this.utterance !== undefined) {
    output.writeFieldBegin('utterance', Thrift.Type.STRING, 2);
    output.writeString(this.utterance);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 3);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createdate !== null && this.createdate !== undefined) {
    output.writeFieldBegin('createdate', Thrift.Type.STRING, 4);
    output.writeString(this.createdate);
    output.writeFieldEnd();
  }
  if (this.updatedate !== null && this.updatedate !== undefined) {
    output.writeFieldBegin('updatedate', Thrift.Type.STRING, 5);
    output.writeString(this.updatedate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProdVersion = module.exports.ProdVersion = function(args) {
  this.chatbotID = null;
  this.version = null;
  this.active = null;
  this.latest = null;
  this.id = null;
  this.operated = null;
  this.notes = null;
  this.createdate = null;
  if (args) {
    if (args.chatbotID !== undefined && args.chatbotID !== null) {
      this.chatbotID = args.chatbotID;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.active !== undefined && args.active !== null) {
      this.active = args.active;
    }
    if (args.latest !== undefined && args.latest !== null) {
      this.latest = args.latest;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.operated !== undefined && args.operated !== null) {
      this.operated = args.operated;
    }
    if (args.notes !== undefined && args.notes !== null) {
      this.notes = args.notes;
    }
    if (args.createdate !== undefined && args.createdate !== null) {
      this.createdate = args.createdate;
    }
  }
};
ProdVersion.prototype = {};
ProdVersion.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.chatbotID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.latest = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.operated = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.notes = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.createdate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProdVersion.prototype.write = function(output) {
  output.writeStructBegin('ProdVersion');
  if (this.chatbotID !== null && this.chatbotID !== undefined) {
    output.writeFieldBegin('chatbotID', Thrift.Type.STRING, 1);
    output.writeString(this.chatbotID);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 2);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.active !== null && this.active !== undefined) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 3);
    output.writeBool(this.active);
    output.writeFieldEnd();
  }
  if (this.latest !== null && this.latest !== undefined) {
    output.writeFieldBegin('latest', Thrift.Type.BOOL, 4);
    output.writeBool(this.latest);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 5);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.operated !== null && this.operated !== undefined) {
    output.writeFieldBegin('operated', Thrift.Type.STRING, 6);
    output.writeString(this.operated);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.STRING, 7);
    output.writeString(this.notes);
    output.writeFieldEnd();
  }
  if (this.createdate !== null && this.createdate !== undefined) {
    output.writeFieldBegin('createdate', Thrift.Type.STRING, 8);
    output.writeString(this.createdate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DevelopVersion = module.exports.DevelopVersion = function(args) {
  this.chatbotID = null;
  this.version = null;
  this.published = null;
  this.id = null;
  this.createdate = null;
  this.operated = null;
  if (args) {
    if (args.chatbotID !== undefined && args.chatbotID !== null) {
      this.chatbotID = args.chatbotID;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.published !== undefined && args.published !== null) {
      this.published = args.published;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.createdate !== undefined && args.createdate !== null) {
      this.createdate = args.createdate;
    }
    if (args.operated !== undefined && args.operated !== null) {
      this.operated = args.operated;
    }
  }
};
DevelopVersion.prototype = {};
DevelopVersion.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.chatbotID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.published = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.createdate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.operated = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DevelopVersion.prototype.write = function(output) {
  output.writeStructBegin('DevelopVersion');
  if (this.chatbotID !== null && this.chatbotID !== undefined) {
    output.writeFieldBegin('chatbotID', Thrift.Type.STRING, 1);
    output.writeString(this.chatbotID);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 2);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.published !== null && this.published !== undefined) {
    output.writeFieldBegin('published', Thrift.Type.BOOL, 3);
    output.writeBool(this.published);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 4);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.createdate !== null && this.createdate !== undefined) {
    output.writeFieldBegin('createdate', Thrift.Type.STRING, 5);
    output.writeString(this.createdate);
    output.writeFieldEnd();
  }
  if (this.operated !== null && this.operated !== undefined) {
    output.writeFieldBegin('operated', Thrift.Type.STRING, 6);
    output.writeString(this.operated);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Data = module.exports.Data = function(args) {
  this.rc = null;
  this.error = null;
  this.msg = null;
  this.id = null;
  this.chatbotID = null;
  this.customdicts = null;
  this.sysdicts = null;
  this.botsysdicts = null;
  this.dictwords = null;
  this.customdict = null;
  this.sysdict = null;
  this.botsysdict = null;
  this.dictword = null;
  this.dictpattern = null;
  this.patterncheck = null;
  this.patternchecks = null;
  this.intents = null;
  this.slots = null;
  this.utters = null;
  this.intent = null;
  this.slot = null;
  this.utter = null;
  this.devvers = null;
  this.provers = null;
  this.devver = null;
  this.prover = null;
  this.sessions = null;
  this.messages = null;
  this.session = null;
  this.message = null;
  this.currpage = null;
  this.totalpage = null;
  this.totalrows = null;
  this.pagesize = null;
  this.page = null;
  this.query = null;
  if (args) {
    if (args.rc !== undefined && args.rc !== null) {
      this.rc = args.rc;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = args.msg;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.chatbotID !== undefined && args.chatbotID !== null) {
      this.chatbotID = args.chatbotID;
    }
    if (args.customdicts !== undefined && args.customdicts !== null) {
      this.customdicts = Thrift.copyList(args.customdicts, [null]);
    }
    if (args.sysdicts !== undefined && args.sysdicts !== null) {
      this.sysdicts = Thrift.copyList(args.sysdicts, [null]);
    }
    if (args.botsysdicts !== undefined && args.botsysdicts !== null) {
      this.botsysdicts = Thrift.copyList(args.botsysdicts, [ttypes.BotSysdict]);
    }
    if (args.dictwords !== undefined && args.dictwords !== null) {
      this.dictwords = Thrift.copyList(args.dictwords, [ttypes.DictWord]);
    }
    if (args.customdict !== undefined && args.customdict !== null) {
      this.customdict = new ttypes.Dict(args.customdict);
    }
    if (args.sysdict !== undefined && args.sysdict !== null) {
      this.sysdict = new ttypes.Dict(args.sysdict);
    }
    if (args.botsysdict !== undefined && args.botsysdict !== null) {
      this.botsysdict = new ttypes.BotSysdict(args.botsysdict);
    }
    if (args.dictword !== undefined && args.dictword !== null) {
      this.dictword = new ttypes.DictWord(args.dictword);
    }
    if (args.dictpattern !== undefined && args.dictpattern !== null) {
      this.dictpattern = new ttypes.DictPattern(args.dictpattern);
    }
    if (args.patterncheck !== undefined && args.patterncheck !== null) {
      this.patterncheck = new ttypes.DictPatternCheck(args.patterncheck);
    }
    if (args.patternchecks !== undefined && args.patternchecks !== null) {
      this.patternchecks = Thrift.copyList(args.patternchecks, [ttypes.DictPatternCheck]);
    }
    if (args.intents !== undefined && args.intents !== null) {
      this.intents = Thrift.copyList(args.intents, [ttypes.Intent]);
    }
    if (args.slots !== undefined && args.slots !== null) {
      this.slots = Thrift.copyList(args.slots, [ttypes.IntentSlot]);
    }
    if (args.utters !== undefined && args.utters !== null) {
      this.utters = Thrift.copyList(args.utters, [ttypes.IntentUtter]);
    }
    if (args.intent !== undefined && args.intent !== null) {
      this.intent = new ttypes.Intent(args.intent);
    }
    if (args.slot !== undefined && args.slot !== null) {
      this.slot = new ttypes.IntentSlot(args.slot);
    }
    if (args.utter !== undefined && args.utter !== null) {
      this.utter = new ttypes.IntentUtter(args.utter);
    }
    if (args.devvers !== undefined && args.devvers !== null) {
      this.devvers = Thrift.copyList(args.devvers, [ttypes.DevelopVersion]);
    }
    if (args.provers !== undefined && args.provers !== null) {
      this.provers = Thrift.copyList(args.provers, [ttypes.ProdVersion]);
    }
    if (args.devver !== undefined && args.devver !== null) {
      this.devver = new ttypes.DevelopVersion(args.devver);
    }
    if (args.prover !== undefined && args.prover !== null) {
      this.prover = new ttypes.ProdVersion(args.prover);
    }
    if (args.sessions !== undefined && args.sessions !== null) {
      this.sessions = Thrift.copyList(args.sessions, [ttypes.ChatSession]);
    }
    if (args.messages !== undefined && args.messages !== null) {
      this.messages = Thrift.copyList(args.messages, [ttypes.ChatMessage]);
    }
    if (args.session !== undefined && args.session !== null) {
      this.session = new ttypes.ChatSession(args.session);
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = new ttypes.ChatMessage(args.message);
    }
    if (args.currpage !== undefined && args.currpage !== null) {
      this.currpage = args.currpage;
    }
    if (args.totalpage !== undefined && args.totalpage !== null) {
      this.totalpage = args.totalpage;
    }
    if (args.totalrows !== undefined && args.totalrows !== null) {
      this.totalrows = args.totalrows;
    }
    if (args.pagesize !== undefined && args.pagesize !== null) {
      this.pagesize = args.pagesize;
    }
    if (args.page !== undefined && args.page !== null) {
      this.page = args.page;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
  }
};
Data.prototype = {};
Data.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.rc = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.chatbotID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.customdicts = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = new ttypes.Dict();
          elem23.read(input);
          this.customdicts.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        this.sysdicts = [];
        var _rtmp325 = input.readListBegin();
        var _size24 = _rtmp325.size || 0;
        for (var _i26 = 0; _i26 < _size24; ++_i26) {
          var elem27 = null;
          elem27 = new ttypes.Dict();
          elem27.read(input);
          this.sysdicts.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        this.botsysdicts = [];
        var _rtmp329 = input.readListBegin();
        var _size28 = _rtmp329.size || 0;
        for (var _i30 = 0; _i30 < _size28; ++_i30) {
          var elem31 = null;
          elem31 = new ttypes.BotSysdict();
          elem31.read(input);
          this.botsysdicts.push(elem31);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        this.dictwords = [];
        var _rtmp333 = input.readListBegin();
        var _size32 = _rtmp333.size || 0;
        for (var _i34 = 0; _i34 < _size32; ++_i34) {
          var elem35 = null;
          elem35 = new ttypes.DictWord();
          elem35.read(input);
          this.dictwords.push(elem35);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.customdict = new ttypes.Dict();
        this.customdict.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.sysdict = new ttypes.Dict();
        this.sysdict.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.botsysdict = new ttypes.BotSysdict();
        this.botsysdict.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.dictword = new ttypes.DictWord();
        this.dictword.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.dictpattern = new ttypes.DictPattern();
        this.dictpattern.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.patterncheck = new ttypes.DictPatternCheck();
        this.patterncheck.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.LIST) {
        this.patternchecks = [];
        var _rtmp337 = input.readListBegin();
        var _size36 = _rtmp337.size || 0;
        for (var _i38 = 0; _i38 < _size36; ++_i38) {
          var elem39 = null;
          elem39 = new ttypes.DictPatternCheck();
          elem39.read(input);
          this.patternchecks.push(elem39);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.LIST) {
        this.intents = [];
        var _rtmp341 = input.readListBegin();
        var _size40 = _rtmp341.size || 0;
        for (var _i42 = 0; _i42 < _size40; ++_i42) {
          var elem43 = null;
          elem43 = new ttypes.Intent();
          elem43.read(input);
          this.intents.push(elem43);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.LIST) {
        this.slots = [];
        var _rtmp345 = input.readListBegin();
        var _size44 = _rtmp345.size || 0;
        for (var _i46 = 0; _i46 < _size44; ++_i46) {
          var elem47 = null;
          elem47 = new ttypes.IntentSlot();
          elem47.read(input);
          this.slots.push(elem47);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.LIST) {
        this.utters = [];
        var _rtmp349 = input.readListBegin();
        var _size48 = _rtmp349.size || 0;
        for (var _i50 = 0; _i50 < _size48; ++_i50) {
          var elem51 = null;
          elem51 = new ttypes.IntentUtter();
          elem51.read(input);
          this.utters.push(elem51);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.intent = new ttypes.Intent();
        this.intent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.slot = new ttypes.IntentSlot();
        this.slot.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRUCT) {
        this.utter = new ttypes.IntentUtter();
        this.utter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.LIST) {
        this.devvers = [];
        var _rtmp353 = input.readListBegin();
        var _size52 = _rtmp353.size || 0;
        for (var _i54 = 0; _i54 < _size52; ++_i54) {
          var elem55 = null;
          elem55 = new ttypes.DevelopVersion();
          elem55.read(input);
          this.devvers.push(elem55);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.LIST) {
        this.provers = [];
        var _rtmp357 = input.readListBegin();
        var _size56 = _rtmp357.size || 0;
        for (var _i58 = 0; _i58 < _size56; ++_i58) {
          var elem59 = null;
          elem59 = new ttypes.ProdVersion();
          elem59.read(input);
          this.provers.push(elem59);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRUCT) {
        this.devver = new ttypes.DevelopVersion();
        this.devver.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRUCT) {
        this.prover = new ttypes.ProdVersion();
        this.prover.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.LIST) {
        this.sessions = [];
        var _rtmp361 = input.readListBegin();
        var _size60 = _rtmp361.size || 0;
        for (var _i62 = 0; _i62 < _size60; ++_i62) {
          var elem63 = null;
          elem63 = new ttypes.ChatSession();
          elem63.read(input);
          this.sessions.push(elem63);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.LIST) {
        this.messages = [];
        var _rtmp365 = input.readListBegin();
        var _size64 = _rtmp365.size || 0;
        for (var _i66 = 0; _i66 < _size64; ++_i66) {
          var elem67 = null;
          elem67 = new ttypes.ChatMessage();
          elem67.read(input);
          this.messages.push(elem67);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRUCT) {
        this.session = new ttypes.ChatSession();
        this.session.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRUCT) {
        this.message = new ttypes.ChatMessage();
        this.message.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.I32) {
        this.currpage = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.I32) {
        this.totalpage = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.I32) {
        this.totalrows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.I32) {
        this.pagesize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.I32) {
        this.page = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Data.prototype.write = function(output) {
  output.writeStructBegin('Data');
  if (this.rc !== null && this.rc !== undefined) {
    output.writeFieldBegin('rc', Thrift.Type.I32, 1);
    output.writeI32(this.rc);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 2);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 3);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 4);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.chatbotID !== null && this.chatbotID !== undefined) {
    output.writeFieldBegin('chatbotID', Thrift.Type.STRING, 5);
    output.writeString(this.chatbotID);
    output.writeFieldEnd();
  }
  if (this.customdicts !== null && this.customdicts !== undefined) {
    output.writeFieldBegin('customdicts', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.customdicts.length);
    for (var iter68 in this.customdicts) {
      if (this.customdicts.hasOwnProperty(iter68)) {
        iter68 = this.customdicts[iter68];
        iter68.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sysdicts !== null && this.sysdicts !== undefined) {
    output.writeFieldBegin('sysdicts', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.sysdicts.length);
    for (var iter69 in this.sysdicts) {
      if (this.sysdicts.hasOwnProperty(iter69)) {
        iter69 = this.sysdicts[iter69];
        iter69.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.botsysdicts !== null && this.botsysdicts !== undefined) {
    output.writeFieldBegin('botsysdicts', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.botsysdicts.length);
    for (var iter70 in this.botsysdicts) {
      if (this.botsysdicts.hasOwnProperty(iter70)) {
        iter70 = this.botsysdicts[iter70];
        iter70.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dictwords !== null && this.dictwords !== undefined) {
    output.writeFieldBegin('dictwords', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.dictwords.length);
    for (var iter71 in this.dictwords) {
      if (this.dictwords.hasOwnProperty(iter71)) {
        iter71 = this.dictwords[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.customdict !== null && this.customdict !== undefined) {
    output.writeFieldBegin('customdict', Thrift.Type.STRUCT, 10);
    this.customdict.write(output);
    output.writeFieldEnd();
  }
  if (this.sysdict !== null && this.sysdict !== undefined) {
    output.writeFieldBegin('sysdict', Thrift.Type.STRUCT, 11);
    this.sysdict.write(output);
    output.writeFieldEnd();
  }
  if (this.botsysdict !== null && this.botsysdict !== undefined) {
    output.writeFieldBegin('botsysdict', Thrift.Type.STRUCT, 12);
    this.botsysdict.write(output);
    output.writeFieldEnd();
  }
  if (this.dictword !== null && this.dictword !== undefined) {
    output.writeFieldBegin('dictword', Thrift.Type.STRUCT, 13);
    this.dictword.write(output);
    output.writeFieldEnd();
  }
  if (this.dictpattern !== null && this.dictpattern !== undefined) {
    output.writeFieldBegin('dictpattern', Thrift.Type.STRUCT, 14);
    this.dictpattern.write(output);
    output.writeFieldEnd();
  }
  if (this.patterncheck !== null && this.patterncheck !== undefined) {
    output.writeFieldBegin('patterncheck', Thrift.Type.STRUCT, 15);
    this.patterncheck.write(output);
    output.writeFieldEnd();
  }
  if (this.patternchecks !== null && this.patternchecks !== undefined) {
    output.writeFieldBegin('patternchecks', Thrift.Type.LIST, 16);
    output.writeListBegin(Thrift.Type.STRUCT, this.patternchecks.length);
    for (var iter72 in this.patternchecks) {
      if (this.patternchecks.hasOwnProperty(iter72)) {
        iter72 = this.patternchecks[iter72];
        iter72.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.intents !== null && this.intents !== undefined) {
    output.writeFieldBegin('intents', Thrift.Type.LIST, 17);
    output.writeListBegin(Thrift.Type.STRUCT, this.intents.length);
    for (var iter73 in this.intents) {
      if (this.intents.hasOwnProperty(iter73)) {
        iter73 = this.intents[iter73];
        iter73.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.slots !== null && this.slots !== undefined) {
    output.writeFieldBegin('slots', Thrift.Type.LIST, 18);
    output.writeListBegin(Thrift.Type.STRUCT, this.slots.length);
    for (var iter74 in this.slots) {
      if (this.slots.hasOwnProperty(iter74)) {
        iter74 = this.slots[iter74];
        iter74.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.utters !== null && this.utters !== undefined) {
    output.writeFieldBegin('utters', Thrift.Type.LIST, 19);
    output.writeListBegin(Thrift.Type.STRUCT, this.utters.length);
    for (var iter75 in this.utters) {
      if (this.utters.hasOwnProperty(iter75)) {
        iter75 = this.utters[iter75];
        iter75.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.intent !== null && this.intent !== undefined) {
    output.writeFieldBegin('intent', Thrift.Type.STRUCT, 20);
    this.intent.write(output);
    output.writeFieldEnd();
  }
  if (this.slot !== null && this.slot !== undefined) {
    output.writeFieldBegin('slot', Thrift.Type.STRUCT, 21);
    this.slot.write(output);
    output.writeFieldEnd();
  }
  if (this.utter !== null && this.utter !== undefined) {
    output.writeFieldBegin('utter', Thrift.Type.STRUCT, 22);
    this.utter.write(output);
    output.writeFieldEnd();
  }
  if (this.devvers !== null && this.devvers !== undefined) {
    output.writeFieldBegin('devvers', Thrift.Type.LIST, 23);
    output.writeListBegin(Thrift.Type.STRUCT, this.devvers.length);
    for (var iter76 in this.devvers) {
      if (this.devvers.hasOwnProperty(iter76)) {
        iter76 = this.devvers[iter76];
        iter76.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.provers !== null && this.provers !== undefined) {
    output.writeFieldBegin('provers', Thrift.Type.LIST, 24);
    output.writeListBegin(Thrift.Type.STRUCT, this.provers.length);
    for (var iter77 in this.provers) {
      if (this.provers.hasOwnProperty(iter77)) {
        iter77 = this.provers[iter77];
        iter77.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.devver !== null && this.devver !== undefined) {
    output.writeFieldBegin('devver', Thrift.Type.STRUCT, 25);
    this.devver.write(output);
    output.writeFieldEnd();
  }
  if (this.prover !== null && this.prover !== undefined) {
    output.writeFieldBegin('prover', Thrift.Type.STRUCT, 26);
    this.prover.write(output);
    output.writeFieldEnd();
  }
  if (this.sessions !== null && this.sessions !== undefined) {
    output.writeFieldBegin('sessions', Thrift.Type.LIST, 27);
    output.writeListBegin(Thrift.Type.STRUCT, this.sessions.length);
    for (var iter78 in this.sessions) {
      if (this.sessions.hasOwnProperty(iter78)) {
        iter78 = this.sessions[iter78];
        iter78.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.messages !== null && this.messages !== undefined) {
    output.writeFieldBegin('messages', Thrift.Type.LIST, 28);
    output.writeListBegin(Thrift.Type.STRUCT, this.messages.length);
    for (var iter79 in this.messages) {
      if (this.messages.hasOwnProperty(iter79)) {
        iter79 = this.messages[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.session !== null && this.session !== undefined) {
    output.writeFieldBegin('session', Thrift.Type.STRUCT, 29);
    this.session.write(output);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRUCT, 30);
    this.message.write(output);
    output.writeFieldEnd();
  }
  if (this.currpage !== null && this.currpage !== undefined) {
    output.writeFieldBegin('currpage', Thrift.Type.I32, 31);
    output.writeI32(this.currpage);
    output.writeFieldEnd();
  }
  if (this.totalpage !== null && this.totalpage !== undefined) {
    output.writeFieldBegin('totalpage', Thrift.Type.I32, 32);
    output.writeI32(this.totalpage);
    output.writeFieldEnd();
  }
  if (this.totalrows !== null && this.totalrows !== undefined) {
    output.writeFieldBegin('totalrows', Thrift.Type.I32, 33);
    output.writeI32(this.totalrows);
    output.writeFieldEnd();
  }
  if (this.pagesize !== null && this.pagesize !== undefined) {
    output.writeFieldBegin('pagesize', Thrift.Type.I32, 34);
    output.writeI32(this.pagesize);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.I32, 35);
    output.writeI32(this.page);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 36);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

